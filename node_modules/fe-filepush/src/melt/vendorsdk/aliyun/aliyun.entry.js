/**
 *  @file: aliyun.es is a <es> file
 *  @date: File created 2017-09-29 18:05
 *  @author:  shangwenhe
 */

'use strict';

import asyncWaterfall from 'async/waterfall';
import asyncMap from 'async/map';
import asyncMapLimit from 'async/mapLimit';

import cryptoHmacSha1 from 'crypto-js/hmac-sha1';
import cryptoBase64 from 'crypto-js/enc-base64';

class aliyun {
  constructor({
    region,
    accessKeyId,
    accessKeySecret,
    stsToken,
    endpoint,
    bucket
  }) {
    this.opt = {
      region,
      accessKeyId,
      accessKeySecret,
      stsToken,
      endpoint,
      bucket
    };
    this.blockSize = 4 * 1024 * 1024;
    return this;
  }

  __setAuthorization(request, file, header){
    let headers= Object.assign({
      "x-oss-security-token": this.opt.stsToken,
      "x-oss-date": (new Date()).toUTCString(),
      "x-oss-user-agent": "vipkid-vvos-js/" + ( navigator && navigator.userAgent) ||  'node',
      "Content-Type": file.type || 'text/plain; charset=UTF-8',
      "Method": "PUT",
      "URL": ['', this.opt.bucket, file.key].join('/')
    }, header || {})
    var params = [headers['Method'], '', headers['Content-Type'], headers['x-oss-date'] ];
    var keys = Object.keys( headers ).sort();
    for (var i = 0; i < keys.length; i++) {
      if (keys[i].toLowerCase().indexOf('x-oss') !== -1) {
        params.push(keys[i].toLowerCase() + ':' + headers[keys[i]]);
      }
    }
    params.push(headers.URL)
    let bytes = cryptoHmacSha1(params.join('\n'), this.opt.accessKeySecret);
    headers['authorization'] =  "OSS " + this.opt.accessKeyId  + ":" + cryptoBase64.stringify(bytes);
    var headerKeys = Object.keys( headers ).sort();
    for (var m = 0; m < headerKeys.length; m++){
      request.setRequestHeader( headerKeys[m], headers[headerKeys[ m]] );
    }
  }

  // 文件小于 4M
  directUpFile(file, callback, progress){
    var request = new XMLHttpRequest(); // 新建XMLHttpRequest对象
    // 发送请求:
    request.open('PUT', [ '//', this.opt.bucket, '.', this.opt.endpoint, '/', file.key ].join(''));
    this.__setAuthorization(request, file, { URL : ['', this.opt.bucket, file.key].join('/')});
    request.onreadystatechange = function () { // 状态发生变化时，函数被回调
        if (request.readyState === 4) { // 成功完成
            if (request.status === 200) {
              callback(null, {
                key: file.key,
                name: file.key,
                url: request.responseURL,
                hash: request.getResponseHeader('etag')
              });
            } else {
              callback(request)
            }
        }
    };

    if( request.upload ){
      request.upload.onprogress = (progressEvent)=>{
        progress(file, progressEvent)
      };
    }
    request.send(file)
  }
  __InitiateMultipartUpload(file, callback) {
    var request = new XMLHttpRequest(); // 新建XMLHttpRequest对象
    // 发送请求:
    request.open('POST', [ '//', this.opt.bucket, '.', this.opt.endpoint, '/', file.key, '?uploads='].join(''));
    this.__setAuthorization(request, file, {
      "Method": "POST",
      "URL": ['', this.opt.bucket, file.key].join('/') + '?uploads'
    });
    request.onreadystatechange = function () { // 状态发生变化时，函数被回调
        if (request.readyState === 4) { // 成功完成
            if (request.status === 200) {
              let xml = request.responseXML;
              let InitiateMultipartUploadResult = xml.getElementsByTagName('InitiateMultipartUploadResult')[0];
              let bucket = InitiateMultipartUploadResult.getElementsByTagName('Bucket')[0].textContent;
              let key = InitiateMultipartUploadResult.getElementsByTagName('Key')[0].textContent;
              let uploadId = InitiateMultipartUploadResult.getElementsByTagName('UploadId')[0].textContent;

              callback(null, {
                key,
                bucket,
                uploadId,
                url: request.responseURL
              });
            } else {
              callback(request)
            }
        }
    }
    request.send();
  }
  __UploadPart(file, callback, progress){
    var request = new XMLHttpRequest(); // 新建XMLHttpRequest对象
    // 发送请求:
    request.open('PUT', `//${this.opt.bucket}.${this.opt.endpoint}/${file.key}?partNumber=${file.index}&uploadId=${file.uploadId}`);
    this.__setAuthorization(request, file, {
      "Method": "PUT",
      "URL": `/${this.opt.bucket}/${file.key}?partNumber=${file.index}&uploadId=${file.uploadId}`
    });
    request.onreadystatechange = function () { // 状态发生变化时，函数被回调
        if (request.readyState === 4) { // 成功完成
            if (request.status === 200) {
              callback(null, {
                url: request.responseURL,
                xml: '<Part>' +
                        `<PartNumber>${file.index}</PartNumber>` +
                        `<ETag>${request.getResponseHeader('etag')}</ETag>` +
                    '</Part>'
              });
            } else {
              callback(request)
            }
        }
    }
    if( request.upload ){
      request.upload.onprogress = (progressEvent)=>{
        progress(file.file, progressEvent)
      };
    }
    request.send(file.file);
  }
  __CompleteMultipartUpload(data, callback){
    var request = new XMLHttpRequest(); // 新建XMLHttpRequest对象
    // 发送请求:

    request.open('POST', `//${this.opt.bucket}.${this.opt.endpoint}/${data.file.key}?uploadId=${data.uploadId}`);
    this.__setAuthorization(request, data.file, {
      "Method": "POST",
      "URL": `/${this.opt.bucket}/${data.file.key}?uploadId=${data.uploadId}`
    });
    request.onreadystatechange = function () { // 状态发生变化时，函数被回调
        if (request.readyState === 4) { // 成功完成
            if (request.status === 200) {
              let xml = request.responseXML;
              let CompleteMultipartUploadResult = xml.getElementsByTagName('CompleteMultipartUploadResult')[0];
              let bucket = CompleteMultipartUploadResult.getElementsByTagName('Bucket')[0].textContent;
              let key = CompleteMultipartUploadResult.getElementsByTagName('Key')[0].textContent;
              let etag = CompleteMultipartUploadResult.getElementsByTagName('ETag')[0].textContent;
              let location = CompleteMultipartUploadResult.getElementsByTagName('Location')[0].textContent;
              callback(null, {
                url: location,
                bucket,
                key,
                name: key,
                hash: etag
              });
            } else {
              callback(request)
            }
        }
    }
    request.send(data.xml);
    
  }
  sliceUpFile(file, callback, progress){
    
    asyncWaterfall([(callback)=>{
      this.__InitiateMultipartUpload(file, (err, data)=>{
        callback(err, data)
      });
    }, (data, callback)=>{
      // 对文件进行分割 
      let blockCount = Math.ceil(file.size / this.blockSize);
      let chunks = [];
      let uploadId = data.uploadId;

      for(var i = 0;i < blockCount;++i){
        let start = i * this.blockSize;
        let end = Math.min(file.size, start + this.blockSize);
        let size = end - start; 
        chunks.push({ index:i+1, file: file.slice(start,end), size, key: file.key, uploadId, type: file.type });
      }
      asyncMapLimit(chunks, 5,(chunk, callback) => {
        this.__UploadPart(chunk, callback, progress);
      }, (err, data)=>{
        let partXML = ['<CompleteMultipartUpload>'];
        data.map((part)=>{
          partXML.push(part.xml)
        });
        partXML.push('</CompleteMultipartUpload>');
        callback(null, {xml: partXML.join('\n'), uploadId, file})
      })
    },(data, callback)=>{
      this.__CompleteMultipartUpload(data, callback);
    }], callback)
  }

  // 上传文件
  put(files, callback, progress) {
    asyncMap(files, (file, callback) => {
      if(file.size <  this.blockSize){
        // 文件小于预设值,文件直传
        this.directUpFile(file, (err, data)=>{
          callback(err, data)
        }, typeof progress == 'function' && progress || function(){});
      }else{
        // 文件分段上传
        this.sliceUpFile(file, callback, typeof progress == 'function' && progress || function(){});
      }
    }, callback)
  }
}

export default aliyun;
