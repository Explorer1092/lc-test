/**
 *  @file: qiniu.entry.es is a <es> file
 *  @date: File created 2017-09-30 12:39
 *  @author:  shangwenhe
 */

'use strict';

import axios from 'axios';
import asyncMapLimit from 'async/mapLimit'
import asyncWaterfall from 'async/waterfall'
import asyncMap from 'async/map'
import cryptoUtf8 from 'crypto-js/enc-utf8';
import cryptoBase64 from 'crypto-js/enc-base64';

class qiniu {
  constructor({
    bucket,
    key,
    token
  }) {
    // this.client = new KODO();
    this.options = {
      bucket,
      token,
      domain: 'up.qiniup.com'
    };
    this.blockSize = 4 * 1024 * 1024;
    return this;
  }

  /**
   * 文件直传
   * */
  directUpFile(file, callback, progress){
    var instance = axios.create({
      headers: {'Authorization': this.options.token },
      onUploadProgress: (progressEvent)=>{
        progress(file, progressEvent);
      }
    });
    let paramsData = new FormData();
    paramsData.append('key', file.key);
    paramsData.append('token', this.options.token);
    paramsData.append('file', file);
    instance.post(file.host, paramsData).then(function(result){
      callback(null, Object.assign({},result.data, {name: result.data.key}));
    }).catch(function(err){
      callback(err);
    });


  }

  /**
   * 文件分片上传
   * */
  sliceUpFile(file, callback, progress){
    let blockCount = Math.ceil(file.size / this.blockSize);
    let chunks = [];

    for(var i = 0;i < blockCount;++i){
      let start = i * this.blockSize;
      let end = Math.min(file.size, start + this.blockSize);
      let size = end - start; 
      chunks.push({ index:i, file: file.slice(start,end), size, key: file.key, token: this.options.token });
    }
    let chunkResult = [];
    asyncMapLimit(chunks, 5,(chunk, callback) => {
      var instance = axios.create({
        headers: {
          'Accept':'*/*',
          'Authorization': 'UpToken ' + chunk.token,
          'Content-Type': 'application/octet-stream'
        },
        onUploadProgress: (progressEvent)=>{
          progress(file, progressEvent);
        }
      });
      let host = [file.host, 'mkblk', chunk.size].join('/');

      host = host + '?' + ['name=' + chunk.key, 'chunk=' + chunk.index, 'chunks=' + chunks.length  ].join('&')
      instance.post(host, chunk.file).then(function(result){
        result.data && result.data.ctx && chunkResult.push(result.data.ctx); 
        callback(null, result.data && result.data.ctx);
      }).catch(function(err){
        callback(null, err);
      })

    },(err, data) => {
      var instance = axios.create({
        headers: {
          'Authorization': 'UpToken ' + this.options.token,
          'Content-Type': 'text/plain'
        }
      });
      let key = cryptoBase64.stringify( cryptoUtf8.parse(file.key) );
      let host = [ file.host, 'mkfile', file.size, 'key', key, 'fname', key].join('/');
      instance.post(host, data.join(',') ).then(function(result){
        callback(null,Object.assign({},result.data, {name: result.data.key}));
      }).catch(function(err){
        callback(null, err);
      })
    })

  } 
  put(files, callback, progress) {
    asyncWaterfall([(callback)=>{
      let bucket = this.options.bucket;
      let ak = this.options.token.split(':')[0];
      var instance = axios.create({
        headers: {}
      });
      instance.get('https://uc.qbox.me/v1/query',{params:{
        ak,
        bucket
      }}).then((res)=>{
        let protocol =  window.location.protocol.replace(/:$/,'') || 'http';
        let host = res.data[protocol] && res.data[protocol]['up'] && res.data[protocol]['up'][1] || 'http://up.qiniu.com';
        callback(null, {host, protocol})
      }).catch((error)=>{
        callback(error) 
      })
    },(res, callback)=>{
      asyncMap(files,(file, callback) => {
        file.host = res.host;
        if(file.size < this.blockSize){
          this.directUpFile(file, (err, data)=>{
            callback(err, data)
          }, typeof progress == 'function' && progress );
        }else{
          this.sliceUpFile(file, callback,  typeof progress == 'function' && progress);
        }
      },callback)
    }],callback);
  }
}
export default qiniu;
