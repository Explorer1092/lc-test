/**
 *  @file: index.js is a <js> file
 *  @date: File created 2018-06-26 10:33
 *  @author:  shangwenhe
 */

'use strict';

import axios from './request.js'

class filepush extends axios {

  constructor({accessKey, secretKey, client=0, path='fe-static'}){
    if(!client) {
      throw new Error('必须定义一下当前client 如：vfe-parent-version ');
      return;
    }
    super({
      accessKey,
      secretKey,
      client,
      path
    })
    this.files = [];
  }

  addfiles(files){
    this.files = this.files.concat(files);
  }

  fileKeys(){
    return this.files.map((item)=>{ 
      // 如果fullname已经存在则直接返回
      if(item.fullname){
        item.key = item.fullname.replace(/^\/*/g,'').replace(/\/+/g,'/');
        return item.key;
      }

      let uri = ( item.path || this.path ) + '/' + item.name;

      // 为资源赋值
      item.key = uri.replace(/^\/*/g,'').replace(/\/+/g,'/');
      return item.key;
    }) 
  }
  async submit(success, progress){
    
    // 定义所有相关的变量
    var error = null, token, cdnUri, fileUri, fileKeys, exists;
    
    // 取得公钥私私钥
    fileKeys = this.fileKeys(this.files);

    if(!fileKeys.length){
      throw new Error('必须至少添加一个文件');
    }
    [error, token] = await this.getToken(fileKeys);
    if(error){ success(error); return;}

    // 文件是否存在
    [error, exists] = await this.exists(fileKeys);
    if(error){ success(error); return;}

    // 上传文件
    [error, cdnUri] = await this.uploadFile(token, progress);
    if(error){ success(error); return;}

    // 文件上传成功后通知服务器
    var keys = cdnUri.filter(item => item).map(item => item.name);
    [error, fileUri] = await this.notifier(keys, token.accessToken);

    // 成功后的回调
    success(error, fileUri);

  }

  reset(){
    this.files = []; 
  }

}

export default filepush;
