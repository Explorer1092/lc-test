/**
 *  @file: request.js is a <js> file
 *  @date: File created 2018-06-26 10:46
 *  @author:  shangwenhe
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _cryptoFe = require('./crypto.fe.js');

var _cryptoFe2 = _interopRequireDefault(_cryptoFe);

var _uuidV = require('./sbin/uuid-v4.js');

var _uuidV2 = _interopRequireDefault(_uuidV);

var _vos = require('./melt/vos.sdk');

var _vos2 = _interopRequireDefault(_vos);

var _promise = require('promise');

var _promise2 = _interopRequireDefault(_promise);

var _filterLimit = require('async/filterLimit');

var _filterLimit2 = _interopRequireDefault(_filterLimit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var request = function (_crypto) {
  _inherits(request, _crypto);

  function request(_ref) {
    var accessKey = _ref.accessKey,
        secretKey = _ref.secretKey,
        _ref$client = _ref.client,
        client = _ref$client === undefined ? 'filepush fe-sdk' : _ref$client,
        path = _ref.path;

    _classCallCheck(this, request);

    var _this = _possibleConstructorReturn(this, (request.__proto__ || Object.getPrototypeOf(request)).call(this));

    Object.assign(_this, { accessKey: accessKey, secretKey: secretKey, client: client, path: path });
    return _this;
  }
  // 创建一个新的HTTP实例


  _createClass(request, [{
    key: 'http',
    value: function http() {
      var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var timestamp = Math.round(new Date().getTime() / 1000).toString();
      return _axios2.default.create({
        baseURL: 'https://fe-vos.vipkid.com.cn/rest/',
        timeout: 6000,
        headers: Object.assign({
          'Content-Type': 'application/json',
          'VOS-ACCESS-KEY': this.accessKey,
          'VOS-ACCESS-SIGN': this.UrlSafeEncode(this.HmacSHA256(timestamp + '.' + this.accessKey, this.secretKey)),
          'VOS-ACCESS-TIMESTAMP': timestamp,
          'X-VOS-CLIENT': this.client
        }, headers)
      });
    }

    // 取得文件密钥

  }, {
    key: 'getToken',
    value: function getToken(keys) {
      var _this2 = this;

      var header = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var axios;
      return _regenerator2.default.async(function getToken$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              axios = this.http();
              return _context.abrupt('return', new _promise2.default(function (resolve, reject) {
                axios.post('/v1/object/put/token/', {
                  "requestToken": _this2.requestToken({
                    header: header,
                    payload: {
                      "requestId": _uuidV2.default,
                      "client": _this2.client,
                      "clouds": ['kodo', 'oss']
                    },
                    secretKey: _this2.secretKey
                  }),
                  keys: keys
                }).then(function (res) {
                  resolve([null, res.data]);
                }).catch(function (err) {
                  resolve([err]);
                });
              }));

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }

    // 上传文件 

  }, {
    key: 'uploadFile',
    value: function uploadFile(token, process) {
      var _this3 = this;

      var _parseToken, _parseToken2, tmp1, accessToken, tmp2, tmp3, vos;

      return _regenerator2.default.async(function uploadFile$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (token.accessToken) {
                _context2.next = 3;
                break;
              }

              throw new Error('token 结果出错, 不存在在accessToken');

            case 3:
              _parseToken = this.parseToken(token.accessToken), _parseToken2 = _slicedToArray(_parseToken, 4), tmp1 = _parseToken2[0], accessToken = _parseToken2[1], tmp2 = _parseToken2[2], tmp3 = _parseToken2[3];
              vos = new _vos2.default(accessToken);
              return _context2.abrupt('return', new _promise2.default(function (resolve, reject) {
                vos.put(_this3.files, function (err, data) {
                  resolve([err, data]);
                }, process);
              }));

            case 6:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this);
    }

    // 通知服务器已经上传成功

  }, {
    key: 'notifier',
    value: function notifier(keys, accessToken) {
      var axios;
      return _regenerator2.default.async(function notifier$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              axios = this.http();
              return _context3.abrupt('return', new _promise2.default(function (resolve, reject) {
                axios.post('/v1/object/put/commit', {
                  accessToken: accessToken,
                  keys: keys
                }).then(function (res) {
                  resolve([null, res.data]);
                }).catch(function (err) {
                  resolve([err]);
                });
              }));

            case 2:
            case 'end':
              return _context3.stop();
          }
        }
      }, null, this);
    }

    // 通知服务器已经上传成功

  }, {
    key: 'exists',
    value: function exists(keys) {
      var axios;
      return _regenerator2.default.async(function exists$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              axios = this.http();
              return _context4.abrupt('return', new _promise2.default(function (resolve, reject) {
                /**
                * @desc 并发验证文件是否存在
                */
                (0, _filterLimit2.default)(keys, 1, function (key, callback) {
                  axios.post('/v1/object/exists', { key: key }).then(function (_ref2) {
                    var data = _ref2.data;

                    if (data && data.exists) {
                      callback(Object.assign({ key: key }, data));
                      return;
                    }
                    callback(null, data);
                  }).catch(function (err) {
                    /**
                    * @desc 如果请求出错则跳过该上传文件
                    */
                    callback(err);
                  });
                }, function (err, files) {
                  resolve([err, files]);
                });
              }));

            case 2:
            case 'end':
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }]);

  return request;
}(_cryptoFe2.default);

exports.default = request;