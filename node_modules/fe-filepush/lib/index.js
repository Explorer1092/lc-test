/**
 *  @file: index.js is a <js> file
 *  @date: File created 2018-06-26 10:33
 *  @author:  shangwenhe
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _request = require('./request.js');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var filepush = function (_axios) {
  _inherits(filepush, _axios);

  function filepush(_ref) {
    var accessKey = _ref.accessKey,
        secretKey = _ref.secretKey,
        _ref$client = _ref.client,
        client = _ref$client === undefined ? 0 : _ref$client,
        _ref$path = _ref.path,
        path = _ref$path === undefined ? 'fe-static' : _ref$path;

    _classCallCheck(this, filepush);

    if (!client) {
      throw new Error('必须定义一下当前client 如：vfe-parent-version ');
      return _possibleConstructorReturn(_this);
    }

    var _this = _possibleConstructorReturn(this, (filepush.__proto__ || Object.getPrototypeOf(filepush)).call(this, {
      accessKey: accessKey,
      secretKey: secretKey,
      client: client,
      path: path
    }));

    _this.files = [];
    return _this;
  }

  _createClass(filepush, [{
    key: 'addfiles',
    value: function addfiles(files) {
      this.files = this.files.concat(files);
    }
  }, {
    key: 'fileKeys',
    value: function fileKeys() {
      var _this2 = this;

      return this.files.map(function (item) {
        // 如果fullname已经存在则直接返回
        if (item.fullname) {
          item.key = item.fullname.replace(/^\/*/g, '').replace(/\/+/g, '/');
          return item.key;
        }

        var uri = (item.path || _this2.path) + '/' + item.name;

        // 为资源赋值
        item.key = uri.replace(/^\/*/g, '').replace(/\/+/g, '/');
        return item.key;
      });
    }
  }, {
    key: 'submit',
    value: function submit(success, progress) {
      var error, token, cdnUri, fileUri, fileKeys, exists, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, keys, _ref8, _ref9;

      return _regenerator2.default.async(function submit$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:

              // 定义所有相关的变量
              error = null;

              // 取得公钥私私钥

              fileKeys = this.fileKeys(this.files);

              if (fileKeys.length) {
                _context.next = 4;
                break;
              }

              throw new Error('必须至少添加一个文件');

            case 4:
              _context.next = 6;
              return _regenerator2.default.awrap(this.getToken(fileKeys));

            case 6:
              _ref2 = _context.sent;
              _ref3 = _slicedToArray(_ref2, 2);
              error = _ref3[0];
              token = _ref3[1];

              if (!error) {
                _context.next = 13;
                break;
              }

              success(error);return _context.abrupt('return');

            case 13:
              _context.next = 15;
              return _regenerator2.default.awrap(this.exists(fileKeys));

            case 15:
              _ref4 = _context.sent;
              _ref5 = _slicedToArray(_ref4, 2);
              error = _ref5[0];
              exists = _ref5[1];

              if (!error) {
                _context.next = 22;
                break;
              }

              success(error);return _context.abrupt('return');

            case 22:
              _context.next = 24;
              return _regenerator2.default.awrap(this.uploadFile(token, progress));

            case 24:
              _ref6 = _context.sent;
              _ref7 = _slicedToArray(_ref6, 2);
              error = _ref7[0];
              cdnUri = _ref7[1];

              if (!error) {
                _context.next = 31;
                break;
              }

              success(error);return _context.abrupt('return');

            case 31:

              // 文件上传成功后通知服务器
              keys = cdnUri.filter(function (item) {
                return item;
              }).map(function (item) {
                return item.name;
              });
              _context.next = 34;
              return _regenerator2.default.awrap(this.notifier(keys, token.accessToken));

            case 34:
              _ref8 = _context.sent;
              _ref9 = _slicedToArray(_ref8, 2);
              error = _ref9[0];
              fileUri = _ref9[1];


              // 成功后的回调
              success(error, fileUri);

            case 39:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'reset',
    value: function reset() {
      this.files = [];
    }
  }]);

  return filepush;
}(_request2.default);

exports.default = filepush;