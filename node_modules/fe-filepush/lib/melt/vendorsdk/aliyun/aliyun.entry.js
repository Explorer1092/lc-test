/**
 *  @file: aliyun.es is a <es> file
 *  @date: File created 2017-09-29 18:05
 *  @author:  shangwenhe
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _waterfall = require('async/waterfall');

var _waterfall2 = _interopRequireDefault(_waterfall);

var _map = require('async/map');

var _map2 = _interopRequireDefault(_map);

var _mapLimit = require('async/mapLimit');

var _mapLimit2 = _interopRequireDefault(_mapLimit);

var _hmacSha = require('crypto-js/hmac-sha1');

var _hmacSha2 = _interopRequireDefault(_hmacSha);

var _encBase = require('crypto-js/enc-base64');

var _encBase2 = _interopRequireDefault(_encBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var aliyun = function () {
  function aliyun(_ref) {
    var region = _ref.region,
        accessKeyId = _ref.accessKeyId,
        accessKeySecret = _ref.accessKeySecret,
        stsToken = _ref.stsToken,
        endpoint = _ref.endpoint,
        bucket = _ref.bucket;

    _classCallCheck(this, aliyun);

    this.opt = {
      region: region,
      accessKeyId: accessKeyId,
      accessKeySecret: accessKeySecret,
      stsToken: stsToken,
      endpoint: endpoint,
      bucket: bucket
    };
    this.blockSize = 4 * 1024 * 1024;
    return this;
  }

  _createClass(aliyun, [{
    key: '__setAuthorization',
    value: function __setAuthorization(request, file, header) {
      var headers = Object.assign({
        "x-oss-security-token": this.opt.stsToken,
        "x-oss-date": new Date().toUTCString(),
        "x-oss-user-agent": "vipkid-vvos-js/" + (navigator && navigator.userAgent) || 'node',
        "Content-Type": file.type || 'text/plain; charset=UTF-8',
        "Method": "PUT",
        "URL": ['', this.opt.bucket, file.key].join('/')
      }, header || {});
      var params = [headers['Method'], '', headers['Content-Type'], headers['x-oss-date']];
      var keys = Object.keys(headers).sort();
      for (var i = 0; i < keys.length; i++) {
        if (keys[i].toLowerCase().indexOf('x-oss') !== -1) {
          params.push(keys[i].toLowerCase() + ':' + headers[keys[i]]);
        }
      }
      params.push(headers.URL);
      var bytes = (0, _hmacSha2.default)(params.join('\n'), this.opt.accessKeySecret);
      headers['authorization'] = "OSS " + this.opt.accessKeyId + ":" + _encBase2.default.stringify(bytes);
      var headerKeys = Object.keys(headers).sort();
      for (var m = 0; m < headerKeys.length; m++) {
        request.setRequestHeader(headerKeys[m], headers[headerKeys[m]]);
      }
    }

    // 文件小于 4M

  }, {
    key: 'directUpFile',
    value: function directUpFile(file, callback, progress) {
      var request = new XMLHttpRequest(); // 新建XMLHttpRequest对象
      // 发送请求:
      request.open('PUT', ['//', this.opt.bucket, '.', this.opt.endpoint, '/', file.key].join(''));
      this.__setAuthorization(request, file, { URL: ['', this.opt.bucket, file.key].join('/') });
      request.onreadystatechange = function () {
        // 状态发生变化时，函数被回调
        if (request.readyState === 4) {
          // 成功完成
          if (request.status === 200) {
            callback(null, {
              key: file.key,
              name: file.key,
              url: request.responseURL,
              hash: request.getResponseHeader('etag')
            });
          } else {
            callback(request);
          }
        }
      };

      if (request.upload) {
        request.upload.onprogress = function (progressEvent) {
          progress(file, progressEvent);
        };
      }
      request.send(file);
    }
  }, {
    key: '__InitiateMultipartUpload',
    value: function __InitiateMultipartUpload(file, callback) {
      var request = new XMLHttpRequest(); // 新建XMLHttpRequest对象
      // 发送请求:
      request.open('POST', ['//', this.opt.bucket, '.', this.opt.endpoint, '/', file.key, '?uploads='].join(''));
      this.__setAuthorization(request, file, {
        "Method": "POST",
        "URL": ['', this.opt.bucket, file.key].join('/') + '?uploads'
      });
      request.onreadystatechange = function () {
        // 状态发生变化时，函数被回调
        if (request.readyState === 4) {
          // 成功完成
          if (request.status === 200) {
            var xml = request.responseXML;
            var InitiateMultipartUploadResult = xml.getElementsByTagName('InitiateMultipartUploadResult')[0];
            var bucket = InitiateMultipartUploadResult.getElementsByTagName('Bucket')[0].textContent;
            var key = InitiateMultipartUploadResult.getElementsByTagName('Key')[0].textContent;
            var uploadId = InitiateMultipartUploadResult.getElementsByTagName('UploadId')[0].textContent;

            callback(null, {
              key: key,
              bucket: bucket,
              uploadId: uploadId,
              url: request.responseURL
            });
          } else {
            callback(request);
          }
        }
      };
      request.send();
    }
  }, {
    key: '__UploadPart',
    value: function __UploadPart(file, callback, progress) {
      var request = new XMLHttpRequest(); // 新建XMLHttpRequest对象
      // 发送请求:
      request.open('PUT', '//' + this.opt.bucket + '.' + this.opt.endpoint + '/' + file.key + '?partNumber=' + file.index + '&uploadId=' + file.uploadId);
      this.__setAuthorization(request, file, {
        "Method": "PUT",
        "URL": '/' + this.opt.bucket + '/' + file.key + '?partNumber=' + file.index + '&uploadId=' + file.uploadId
      });
      request.onreadystatechange = function () {
        // 状态发生变化时，函数被回调
        if (request.readyState === 4) {
          // 成功完成
          if (request.status === 200) {
            callback(null, {
              url: request.responseURL,
              xml: '<Part>' + ('<PartNumber>' + file.index + '</PartNumber>') + ('<ETag>' + request.getResponseHeader('etag') + '</ETag>') + '</Part>'
            });
          } else {
            callback(request);
          }
        }
      };
      if (request.upload) {
        request.upload.onprogress = function (progressEvent) {
          progress(file.file, progressEvent);
        };
      }
      request.send(file.file);
    }
  }, {
    key: '__CompleteMultipartUpload',
    value: function __CompleteMultipartUpload(data, callback) {
      var request = new XMLHttpRequest(); // 新建XMLHttpRequest对象
      // 发送请求:

      request.open('POST', '//' + this.opt.bucket + '.' + this.opt.endpoint + '/' + data.file.key + '?uploadId=' + data.uploadId);
      this.__setAuthorization(request, data.file, {
        "Method": "POST",
        "URL": '/' + this.opt.bucket + '/' + data.file.key + '?uploadId=' + data.uploadId
      });
      request.onreadystatechange = function () {
        // 状态发生变化时，函数被回调
        if (request.readyState === 4) {
          // 成功完成
          if (request.status === 200) {
            var xml = request.responseXML;
            var CompleteMultipartUploadResult = xml.getElementsByTagName('CompleteMultipartUploadResult')[0];
            var bucket = CompleteMultipartUploadResult.getElementsByTagName('Bucket')[0].textContent;
            var key = CompleteMultipartUploadResult.getElementsByTagName('Key')[0].textContent;
            var etag = CompleteMultipartUploadResult.getElementsByTagName('ETag')[0].textContent;
            var location = CompleteMultipartUploadResult.getElementsByTagName('Location')[0].textContent;
            callback(null, {
              url: location,
              bucket: bucket,
              key: key,
              name: key,
              hash: etag
            });
          } else {
            callback(request);
          }
        }
      };
      request.send(data.xml);
    }
  }, {
    key: 'sliceUpFile',
    value: function sliceUpFile(file, callback, progress) {
      var _this = this;

      (0, _waterfall2.default)([function (callback) {
        _this.__InitiateMultipartUpload(file, function (err, data) {
          callback(err, data);
        });
      }, function (data, callback) {
        // 对文件进行分割 
        var blockCount = Math.ceil(file.size / _this.blockSize);
        var chunks = [];
        var uploadId = data.uploadId;

        for (var i = 0; i < blockCount; ++i) {
          var start = i * _this.blockSize;
          var end = Math.min(file.size, start + _this.blockSize);
          var size = end - start;
          chunks.push({ index: i + 1, file: file.slice(start, end), size: size, key: file.key, uploadId: uploadId, type: file.type });
        }
        (0, _mapLimit2.default)(chunks, 5, function (chunk, callback) {
          _this.__UploadPart(chunk, callback, progress);
        }, function (err, data) {
          var partXML = ['<CompleteMultipartUpload>'];
          data.map(function (part) {
            partXML.push(part.xml);
          });
          partXML.push('</CompleteMultipartUpload>');
          callback(null, { xml: partXML.join('\n'), uploadId: uploadId, file: file });
        });
      }, function (data, callback) {
        _this.__CompleteMultipartUpload(data, callback);
      }], callback);
    }

    // 上传文件

  }, {
    key: 'put',
    value: function put(files, callback, progress) {
      var _this2 = this;

      (0, _map2.default)(files, function (file, callback) {
        if (file.size < _this2.blockSize) {
          // 文件小于预设值,文件直传
          _this2.directUpFile(file, function (err, data) {
            callback(err, data);
          }, typeof progress == 'function' && progress || function () {});
        } else {
          // 文件分段上传
          _this2.sliceUpFile(file, callback, typeof progress == 'function' && progress || function () {});
        }
      }, callback);
    }
  }]);

  return aliyun;
}();

exports.default = aliyun;