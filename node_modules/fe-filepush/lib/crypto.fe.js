/**
 *  @file: crypto.fe.js is a <js> file
 *  @date: File created 2018-06-26 10:43
 *  @author:  shangwenhe
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _encBase = require('crypto-js/enc-base64');

var _encBase2 = _interopRequireDefault(_encBase);

var _encUtf = require('crypto-js/enc-utf8');

var _encUtf2 = _interopRequireDefault(_encUtf);

var _hmacSha = require('crypto-js/hmac-sha256');

var _hmacSha2 = _interopRequireDefault(_hmacSha);

var _aes = require('crypto-js/aes');

var _aes2 = _interopRequireDefault(_aes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var crypto = function () {
  function crypto() {
    _classCallCheck(this, crypto);
  }

  _createClass(crypto, [{
    key: 'parseToken',


    /**
     * 解密响应token
     */
    value: function parseToken(token) {
      var _token$split = token.split('.'),
          _token$split2 = _slicedToArray(_token$split, 3),
          accessKey = _token$split2[0],
          payload = _token$split2[1],
          secretKey = _token$split2[2];

      try {
        accessKey = JSON.parse(this.Base64Decode(this.UrlSafeDecode(accessKey)));
        var payloadJson = JSON.parse(this.Base64Decode(this.UrlSafeDecode(payload)));
        return [accessKey, payloadJson, [secretKey, _aes2.default.encrypt(payload, secretKey).toString()].join('./MKINFO>_')];
      } catch (e) {
        return [accessKey, payload, secretKey];
      }
    }

    /**
     * 确认提交成功合成 token 
     */

  }, {
    key: 'restringifyToken',
    value: function restringifyToken(_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          accessKey = _ref2[0],
          secretKey = _ref2[1];

      var _secretKey$split = secretKey.split('./MKINFO>_'),
          _secretKey$split2 = _slicedToArray(_secretKey$split, 2),
          secretSalt = _secretKey$split2[0],
          encode = _secretKey$split2[1];

      return [this.stringifyToken(accessKey), _aes2.default.decrypt(encode, secretSalt).toString(_encUtf2.default), secretSalt].join('.');
    }
  }, {
    key: 'stringifyToken',
    value: function stringifyToken(data) {
      return this.UrlSafeEncode(this.Base64(JSON.stringify(data)));
    }

    /**
     * 加密请求token requestToken
     */

  }, {
    key: 'requestToken',
    value: function requestToken(_ref3) {
      var header = _ref3.header,
          payload = _ref3.payload,
          secretKey = _ref3.secretKey;

      var result = [this.stringifyToken(header), this.stringifyToken(payload), this.UrlSafeEncode(this.HmacSHA256(header + '.' + payload, secretKey))];
      return result.join('.');
    }
  }, {
    key: 'Base64Decode',
    value: function Base64Decode(base64) {
      var dbase64k = _encBase2.default.parse(base64);
      return dbase64k.toString(_encUtf2.default);
    }
  }, {
    key: 'Base64',
    value: function Base64(str) {
      var Utf8Str = _encUtf2.default.parse(str);
      return _encBase2.default.stringify(Utf8Str);
    }
  }, {
    key: 'UrlSafeDecode',
    value: function UrlSafeDecode(str) {
      // encrypt
      var DEC = {
        '-': '+',
        '_': '/',
        '.': '='
      };
      return (str + '==='.slice((str.length + 3) % 4)).replace(/[-_.]/g, function (m) {
        return DEC[m];
      });
    }
  }, {
    key: 'UrlSafeEncode',
    value: function UrlSafeEncode(str) {
      // encrypt
      var ENC = {
        '+': '-',
        '/': '_',
        '=': '.'
      };
      return str.replace(/[+/=]/g, function (m) {
        return ENC[m];
      }).replace(/[.=]{1,2}$/, '');
    }
  }, {
    key: 'HmacSHA256',
    value: function HmacSHA256(message, secretKey) {
      var result = (0, _hmacSha2.default)(message, secretKey).toString(_encBase2.default);
      return result;
    }
  }]);

  return crypto;
}();

exports.default = crypto;