chivox.AiPlayerAS = function(options){

    /**
     * 是否可以播放
     */
    this.canPlay = false;
    this.loaded = false;

    /**
     * 默认参数
     * @ignore
     */
    this.params = {
        /**
         * 组件id
         * @ignore
         */
        id: "aiPlayer",

        /**
         * flashPlayer地址
         * @ignore
         */
     




        /**
         * wmode
         * @ignore
         */
        wmode: "Opaque",

        /**
         * 语音服务器appKey
         * @ignore
         */
        appKey: "",

        /**
         * 语音服务器secretKey
         * @ignore
         */
        secretKey: "",

        /**
         * flash加载完成的回调，回调参数(code, message)
         * @ignore
         */
        onFlashLoad: "",

        /**
         * 出错回调，回调参数(code, message)
         * @ignore
         */
        onError: ""
    };
    this.__extend(this.params, options);

    if (typeof jsReady == "undefined") {
        /**
         * @ignore
         */
        window.jsReady = false;
        /**
         * @ignore
         */
        window.jsIsReady = function(){
            return true;
            //return jsReady;
        }
        //window.onload = function(){
        //    jsReady = true;
        //}
    }

    this.aiDebug = new chivox.AiDebug();

    /**
     * 播放器音量
     * @ignore
     */
    this.volume = 1;

    /**
     * 是否开始了合成
     */
    this.__synthStarted = false;

    /**
     * 回调缓存
     * @ignore
     */
    chivox.AiPlayerAS.cache = chivox.AiPlayerAS.cache || {};

    chivox.AiPlayerAS.isConnectRtmpOK = chivox.AiPlayerAS.isConnectRtmpOK || false;

    var x = this;

    /**
     * 播放方法回调序列
     * PLAY_INIT, PLAY_CMD_START, PLAY_CMD_STOP, PLAY_ACT_START, PLAY_ACT_STOP
     * @ignore
     */
    x.__playOrderState = "PLAY_INIT";

   

    var audioPlayerFlashVars = {
        flashLoadEventHandler: "chivox.AiPlayerAS.cache." + x.params.id + "OnFlashLoad",
        onPlayerEventHandler: "chivox.AiPlayerAS.cache." + x.params.id + "OnPlayerStateChange",
        errorEventHandler: "chivox.AiPlayerAS.cache." + x.params.id + "OnError",
        jsLogCallback: "chivox.AiPlayerAS.cache." + x.params.id + "OnLog"
    };
    /**
     * @ignore
     */
    var mf = {
        /**
         * @ignore
         */
        param: function(o){
            var a = [];
            for (var i in o) {
                if(o.hasOwnProperty(i) == false){
                    continue;
                }
                a.push(i + "=" + o[i]);
            }
            return a.join("&").replace(/%20/g, "+");
        }
    };

    var flashPlayerUrl = x.params.flashPlayerUrl;
    if (x.params.isCache == false) {
        flashPlayerUrl = flashPlayerUrl + "?guid=" + Math.random() * 99999999
    }
    if (navigator.platform.match(/inux/g) == "inux") {
        var FO = {
            movie: flashPlayerUrl,
            width: x.params.width,
            height: x.params.height,
            majorversion: "10",
            build: "0",
            id: x.params.id + "UFO",
            name: x.params.id + "UFO",
            wmode: x.params.wmode,
            allowscriptaccess: "always",
            flashvars: mf.param(audioPlayerFlashVars)
        };
        UFO.create(FO, x.params.id);

    } else {
        // dynamically insert flash audio player
        var audioPlayerParams = {
            allowScriptAccess: "always",
            wmode: x.params.wmode
            //bgcolor:"#ffff00"
        };
        var audioPlayerAttributes = {
            id: x.params.id,
            name: x.params.id,
            wmode: x.params.wmode
            //bgcolor:"#ffff00"
        };
        swfobject.embedSWF(flashPlayerUrl, x.params.id, x.params.width, x.params.height, "10.0.0", x.params.expressInstallUrl, audioPlayerFlashVars, audioPlayerParams, audioPlayerAttributes);
        ai$("#" + x.params.id).addClass("loading");
    }
}

/**
 * 扩展对象
 */
chivox.AiPlayerAS.prototype.__extend = function(o, o1){
    if (Object.prototype.toString.call(o) === "[object Object]" && Object.prototype.toString.call(o1) === "[object Object]") {//isObject
        for (var key in o1) {
            if(o1.hasOwnProperty(key) == false){
                continue;
            }
            o[key] = o1[key];
        }
    }
}

chivox.AiPlayer = (function() {
  var AiPlayerH5 = function(options){
    var _ins = this;

    this.canPlay = false;
    this.loaded = false;
    var _audio_buff = null;

    window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;
    this._audioContext = new AudioContext();
    this._audio_src = this._audioContext.createBufferSource();
    this._audio_gain = this._audioContext.createGain();
    this._audio_gain.connect(this._audioContext.destination);

    /**
    * 默认参数
    * @ignore
    */
    this.params = {
      id: "aiPlayer",
      width: 1,
      height: 1,
      appKey: "",
      onFlashLoad: function(code, message) { console.info("onFlashLoad", code, message); },
      onError: function(error) { console.error(error); }
    };

    this.__extend = function(o, o1){
      if (Object.prototype.toString.call(o) === "[object Object]" && Object.prototype.toString.call(o1) === "[object Object]") {//isObject
        for (var key in o1) {
          if(o1.hasOwnProperty(key) == false){
            continue;
          }
          o[key] = o1[key];
        }
      }
    }
  
    this.__extend(this.params, options);
    this.__synthStarted = false;

    this.reset = function() {
      this.stop(true);
    }
  
    this.load = function(options) {
      if (!options.hasOwnProperty('url') || options.url === "") {
        _ins.params.onError("请传入url参数");
        return;
      }

      var req = new XMLHttpRequest();
      req.open('GET', options.url, true);
      req.responseType = 'arraybuffer'; 
      req.onload = function() {
        if (req.status !== 200) {
          if (options.hasOwnProperty("error")) { 
            options.error("url:" + options.url + "不存在，获取失败。 status: " + req.status); 
          }

          return;
        }

        _ins._audioContext.decodeAudioData(req.response, 
            function(data) { 
              _ins._audio_buff = data;
              if (options.hasOwnProperty("success")) { options.success(); }
            },
            function(err) {
              if (options.hasOwnProperty("error")) { options.error(err); }
            }
        );
      };

      req.send();
    }
  
    this.play = function(options) {
      if (_ins._audio_buff && _ins._audioContext) {
        if (!_ins._audio_src) {
          _ins._audio_src = _ins._audioContext.createBufferSource();
        }
          _ins._audio_src.connect(_ins._audio_gain);
          _ins._audio_src.buffer = _ins._audio_buff;
          _ins._audio_src.start(0);

          _ins._audio_src.onended = function() {
            _ins._audio_src = null;
            //console.debug('[ AiPlayerH5.onended ]...');
            if (options.hasOwnProperty("onStop")) { 
              options.onStop(); 
            }
          };

          if (options.hasOwnProperty("onStart")) { options.onStart(); }
      } else {
        _ins.params.onError("buff or context is null");
      }
    }

    this.stop = function(force) {
      if (_ins._audio_src && _ins._audio_src.onended != null) {
        _ins._audio_src.stop();
        _ins._audio_src = null;
      }

      if (!force) {
        console.debug('[ AiPlayerH5.stop ]...');
        if (options.hasOwnProperty("onStop")) { options.onStop(); }
      }
    }

    this.setVolume = function(volume) {
      if (_ins._audio_gain) {
        _ins._audio_gain.connect(this._audioContext.destination);
        _ins._audio_gain.gain.value = volume;
      } else {
        _ins.params.onError("context or gain is null");
      }
    }

    this.getVolume = function() {
      if (_ins._audio_gain) {
        _ins._audio_gain.connect(this._audioContext.destination);
        return _ins._audio_gain.gain.value;
      } else {
        _ins.params.onError("context or gain is null");
        return 0.0;
      }
    }

    this.getDuration = function() {
    }

    this.getPosition = function() {
    }

    this.tts = chivox.AiPlayerAS.prototype.tts;

    this.params.onFlashLoad(0, 0);
  }

  return function(options) {
    var _player;

    switch(options.mode) {
      case chivox.MODE.HTML5:
        navigator.getMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);

        if (!navigator.getMedia) {
          if (typeof options["onError"] !== 'undefined') {
            options["onError"]("[ initPlayer ]浏览器不支持HTML5模式!");
          }

          console.error("[ initPlayer ]浏览器不支持HTML5模式!");
          return null;
        } else {
          _player = new AiPlayerH5(options);
        }

        break;
      default:
      _player = new AiPlayerH5(options);
        break;
    }
    _player.mode = options.mode;

    return _player;
  };
})();
