/*
 * ChiVox API provides ChiVox Ltd's (www.chivox.com) world leading pronunciation
 * evaluation, speech recognition technologies, and text-to-speech technologies.
 *
 * ChiVox Ltd opens this API hoping make every programmer be capable to implement
 * speech enabled applicaitons.
 *
 * Copyright (c) 2008-2014 by ChiVox. All rights reserved.
 *
 */
/**
 * 语音面板，主要控制了“播放”、“录音”、“回放”这三个按钮的逻辑<br>
 *
 * 使用方法：<br>
 * new chivox.AiPanel(options) <br>
 * options.player {chivox.AiPlayer} 播放器对象，默认为null <br>
 * options.recorder {chivox.AiRecorder} 录音机对象，默认为null <br>
 * options.data <br>
 * options.data.audioUrl {string} 音频的URL地址 <br>
 * options.data.playPosition {int} 播放开始时间点(ms)，如果为""，则音频从头开始播放 <br>
 * options.data.playDuration {int} 播放持续时间(ms)，取值必须大于500。如果为""，则音频播放到文件末尾 <br>
 * options.data.duration {int} 录音时长。如果没有设置，系统会根据参考文本给出一个默认录音时长。<br>
 * options.data.serverParams {object} 录音时传到服务器的参数
 *
 * @author kai.li(kai.li@chivox.com) zhiyuan.liang(zhiyuan.liang@chivox.com)
 * @class AiPanel组件
 */
chivox.AiPanel = function(options){

    var x = this;
    
    x.lastRecordId = "";
    
    x.scoreData = {};
    /**
     * 播放器实例
     */
    this.player = null;
    /**
     * 录音机实例
     */
    this.recorder = null;
    /**
     * AiPanel的参数，可以设置以下参数：<br>
     * appKey {string} 录音服务器appKey<br>
     * mode {chivox.MODE} 引擎模式。支持2中：FLASH：flash模式，HTML5: html5模式<br>
     * sigurl {string} 录音服务器生成sig签名字符串的服务器地址，算法参考php/sig.php。<br>
     * autoDetectNetwork {boolean} 当网络有错误时，自动打开设置对话框。默认为true<br>
     * autoDetectMic {boolean} 当麦克风有错误时，自动打开设置对话框。默认为false<br>
     * playerId {string} 播放器id<br>
     * recorderId {string} 录音机id<br>
     * dialogSelector {string} 对话框的节点<br>
     * dialogOverlaySelector {string} 对话框遮罩层节点<br>
     * cssSelectorAncestor {string} aiPanel节点<br>
     * cssSelector {object} aiPanel aiPanel内部的className选择器<br>
     *   cssSelector.play {string} 播放按钮<br>
     *   cssSelector.record {string} 录音按钮<br>
     *   cssSelector.replay {string} 回放按钮<br>
     *   cssSelector.recordProgressBar {string} 录音机进度条<br>
     *   cssSelector.dialogCloseButton {string} 对话框关闭按钮<br>
     *   cssSelector.dialogFlashError {string} Flash出错提示<br>
     *   cssSelector.dialogInfo {string} 连接状态信息<br>
     *   cssSelector.okButton {string} 确定按钮<br>
     * flashWmode {string} Flash的wmode属性<br>
     * language {string} 录音机提示面板的语言，可选值有"en_US"(默认)、"zh-CN"<br>
     * data {object} 播放录音参数对象<br>
     *   data.audioUrl {string} 音频播放地址<br>
     *   data.playPosition {int} 播放开始时间点(ms)<br>
     *   data.playDuration {int} 播放持续时间(ms)，取值必须大于500<br>
     *   data.duration {int} 录音时长。如果没有设置，系统会根据参考文本给出一个默认录音时长。<br>
     *   data.serverParams {object} 录音时传到服务器的参数，具体参数取决于使用的服务类型<br>
     * onDialogOpened {function} 对话框打开时回调<br>
     * onDialogClosed {function} 对话框关闭时回调<br>
     * onBeforePlay {function} 播放之前可以传入播放参数<br>
     * onAfterPlay {function} 自动播放完成之后回调<br>
     * onBeforeRecord {function} 录音之前需要清除评分，确认有录音权限<br>
     * onRecordStart {function} 录音真正开始的回调<br>
     * onAfterRecord 自动和手动停止录音时触发回调事件<br>
     * onRecordIdGenerated {function} 当recordId生成时回调<br>
     * onBeforeScore {function} 评分之前需要等待提示<br>
     * onScore {function} 评分成功需要显示评分结果<br>
     * onScoreError(errorType) {function} 评分失败的显示，errorType有：TIMEOUT, NO_DATA, ErrorID <br>
     * onBeforeReplay{function} 回放开始之前回调<br>
     * onAfterReplay {function} 回放完成时回调<br>
     * onReset 复位时需要隐藏错误信息{function}<br>
     * onMicStatusChange {function} 录音机，当麦克风状态发生改变时回调<br>
     * onConnectorStatusChange {function} 录音机，当连接状态发生改变时回调
     */
    this.params = {
        appKey: "",
        mode: chivox.MODE.FLASH,
        sigurl: "",
        server: "ws://cloud.chivox.com",
        back_server: null,
        autoDetectNetwork: true,
        autoDetectMic: false,
        playerId: "player",
        recorderId: "recorder",
        dialogSelector: "#aiMediaDialog",
        dialogOverlaySelector: "#aiMediaDialogOverlay",
        cssSelectorAncestor: "#aiPanel",
        cssSelector: {
            play: ".play",
            record: ".record",
            replay: ".replay",
            rateButton: ".rateButton",
            recordProgressBar: ".recordProgressBar",
            //
            dialogCloseButton: ".dialogCloseButton",
            dialogFlashError: ".dialogFlashError",
            dialogInfo: ".dialogInfo",
            dialogBody: ".dialogBody",
            okButton: ".okButton"
        },
        flashWmode: "transparent",
        /**
         * 录音机提示面板的语言，可选值有"en_US"、"zh-CN"(默认)
         * @ignore
         */
        language: "zh-CN",
        data: {
            audioUrl: "",
            playPosition: "",
            playDuration: "",
            duration: 0,
            playNotifyAudio: true,
            serverParams: ""
        },
        /**
         * @ignore
         */
        onRateError: function(){
            alert("请先录音再评论");
        },
        /**
         * @ignore
         */
        onDialogOpened: function(){
        },
        /**
         * @ignore
         */
        onDialogClosed: function(){
        },
        /**
         * @ignore
         */
        onBeforePlay: function(el){//播放之前可以传入播放参数
        },
        /**
         * @ignore
         */
        onAfterPlay: function(){//自动播放完成之后回调
        },
        /**
         * @ignore
         */
        onBeforeRecord: function(){//录音之前需要清除评分，确认有录音权限
        },
        /**
         * @ignore
         */
        onRecordStart: function(){//录音真正开始的回调
        },
        /**
         * @ignore
         */
        onAfterRecord: function(){//自动和手动停止录音时触发回调事件
        },
        /**
         * @ignore
         */
        onRecordIdGenerated: function(){//当recordId生成时回调
        },
        /**
         * @ignore
         */
        onBeforeScore: function(){//评分之前需要等待提示
        },
        /**
         * @ignore
         */
        onScore: function(data){//评分成功需要显示评分结果
        },
        /**
         * @ignore
         */
        onInternalScore: function(data){//中间评测结果
        },
        /**
         * @ignore
         */
        onScoreError: function(errorType){//评分失败的显示 "TIMEOUT", "NO_DATA", ErrorID
        },
        onBeforeReplay: function(){//回放开始之前回调
        },
        onAfterReplay: function(){//回放完成时回调
        },
        /**
         * @ignore
         */
        onReset: function(){//复位时需要隐藏错误
        },
        /**
         * @ignore
         */
        onError: function(errorType){//PLAYER_NOT_READY, RECORDER_NOT_READY
            //alert("ERROR: " + errorType);
        },
        /**
         * @ignore
         */
        onPlayerError: function(code, message){
        },
        /**
         * @ignore
         */
        onRecorderError: function(code, message){
        }
    };
    if (typeof options != "undefined") {
        ai$.extend(x.params, options);
    }

    if ((x.params.mode != chivox.MODE.FLASH) && (x.params.mode != chivox.MODE.HTML5)) {
      if (typeof x.params.onError == 'function') {
        x.params.onError("[ AiPanel ]: 只支持模式: chivox.MODE.FLASH或chivox.MODE.HTML5。当前输入的参数mode值为：" + x.params.mode);
      }

      console.error("[ AiPanel ]: 只支持模式: chivox.MODE.FLASH或chivox.MODE.HTML5。当前输入的参数mode值为：" + x.params.mode);
      return;
    }

    if (!(typeof x.params.server == 'string') || (x.params.server === '')) {
      if (typeof x.params.onError == 'function') {
        x.params.onError("[ AiPanel ]: server参数格式不对。当前输入的参数server值为：" + x.params.server);
      }

      console.error("[ AiPanel ]: server参数格式不对。当前输入的参数server值为：" + x.params.server);
      return;
    }

    if ((typeof x.params.back_server == 'string') && (x.params.back_server == '')) {
      if (typeof x.params.onError == 'function') {
        x.params.onError("[ AiPanel ]: back_server参数格式不对。当前输入的参数back_server值为：" + x.params.back_server);
      }

      console.error("[ AiPanel ]: back_server参数格式不对。当前输入的参数back_server值为：" + x.params.back_server);
      return;
    }
    
    var selector = {
        panel: x.params.cssSelectorAncestor,
        play: x.params.cssSelectorAncestor + " " + x.params.cssSelector.play,
        record: x.params.cssSelectorAncestor + " " + x.params.cssSelector.record,
        replay: x.params.cssSelectorAncestor + " " + x.params.cssSelector.replay,
        recordProgressBar: x.params.cssSelector.recordProgressBar,
        rateButton: x.params.cssSelectorAncestor + " " + x.params.cssSelector.rateButton,
        //
        dialogCloseButton: x.params.dialogSelector + " " + x.params.cssSelector.dialogCloseButton,
        dialogFlashError: x.params.dialogSelector + " " + x.params.cssSelector.dialogFlashError,
        dialogInfo: x.params.dialogSelector + " " + x.params.cssSelector.dialogInfo,
        dialogBody: x.params.dialogSelector + " " + x.params.cssSelector.dialogBody,
        okButton: x.params.dialogSelector + " " + x.params.cssSelector.okButton
    };
    this.selector = selector;
    
    var Info = {
        //loadFlashPlayer, loadFlashRecorder, 
        //connectServerInit, connectServerStart, connectServerSuccess, connectServerError, 
        //micStatusAllow, micStatusDisallow, micStatusError
        /**
         * @ignore
         * @param {String} type
         */
        show: function(type){
            var c = ["connectServerInit", "connectServerStart", "connectServerSuccess", "connectServerError"];
            if (ai$.inArray(type, c) > -1) {
                for (var i in c) {
                    if(c.hasOwnProperty(i) == false){
                        continue;
                    }
                    (c[i] != type) && Info.hide(c[i]);
                }
            }
            var m = ["micStatusAllow", "micStatusDisallow", "micStatusError", "mmscfgError"];
            if (ai$.inArray(type, m) > -1) {
                for (var i in m) {
                    if(m.hasOwnProperty(i) == false){
                        continue;
                    }
                    (m[i] != type) && Info.hide(m[i]);
                }
            }
            ai$(selector.dialogInfo + " ." + type).show();
        },
        /**
         * @ignore
         */
        hide: function(type){
            ai$(selector.dialogInfo + " ." + type).hide();
        }
    };
    
    /**
     * 对话框实例，有这些方法：open, close
     */
    var DialogAS = {
        /**
         * 打开对话框
         */
        open: function(){
            ai$(x.params.dialogOverlaySelector).show();

            if (chivox.AiFlashDetect.hasFlash == false) {
                ai$(selector.dialogFlashError).find(".flashPlugin").show();
                ai$(selector.dialogFlashError).show();
                ai$(selector.dialogInfo).hide();
                ai$(x.params.dialogSelector).removeClass("aiMediaDialogClosed aiMediaDialogSuccess").addClass("aiMediaDialogError");
                
            } else if (parseFloat(chivox.AiFlashDetect.version) < 10.2) {
                ai$(selector.dialogFlashError).find(".flashVersion").show();
                ai$(selector.dialogFlashError).show();
                ai$(selector.dialogInfo).hide();
                ai$(x.params.dialogSelector).removeClass("aiMediaDialogClosed aiMediaDialogSuccess").addClass("aiMediaDialogError");
                
            } else {
                ai$(selector.dialogFlashError).hide();
                ai$(x.params.dialogSelector).removeClass("aiMediaDialogClosed aiMediaDialogError").addClass("aiMediaDialogSuccess");
                x.recorder.hideVolumeBar();
            }
            ai$(x.params.dialogSelector).show();
            if (typeof x.params.onDialogOpened == "function") {
                x.params.onDialogOpened();
            }
        },
        /**
         * 关闭对话框
         */
        close: function(){
            ai$(x.params.dialogOverlaySelector).hide();
            ai$(selector.dialogFlashError).hide();
            ai$(x.params.dialogSelector).removeClass("aiMediaDialogSuccess aiMediaDialogError").addClass("aiMediaDialogClosed");
            x.recorder.showVolumeBar();
            if (typeof x.params.onDialogClosed == "function") {
                x.params.onDialogClosed();
            }
        }
    };

    var DialogH5 = {
        open: function(){
          var recorderNode = ai$("#" + x.params.recorderId);

          ai$(x.params.dialogOverlaySelector).show();
          ai$(x.params.dialogSelector).show();
          recorderNode.addClass("volumeBarInDialog");
          ai$(x.params.dialogSelector).removeClass("aiMediaDialogClosed").addClass("aiMediaDialogSuccess aiMediaDialogError");

          x.recorder.showVolumeBar();

          /*
          var volumeControl = ai$("<input type='range' min='0' max='100' value='" + x.player.getVolume() * 100 + "'/>");
          volumeControl.change(function(e) {
            x.player.setVolume(volumeControl.val() / 100.0);
          });
          recorderNode.append(volumeControl);
          */

          if (typeof x.params.onDialogOpened == "function") {
            x.params.onDialogOpened();
          }
        },
        close: function() {
          var recorderNode = ai$("#" + x.params.recorderId);
          recorderNode.removeClass("volumeBarInDialog");

          ai$(x.params.dialogOverlaySelector).hide();
          ai$(selector.dialogFlashError).hide();
          ai$(x.params.dialogSelector).removeClass("aiMediaDialogSuccess aiMediaDialogError").addClass("aiMediaDialogClosed");
          x.recorder.showVolumeBar();
          if (typeof x.params.onDialogClosed == "function") {
              x.params.onDialogClosed();
          }
       }
    };

    var Dialog = (x.params.mode == chivox.MODE.FLASH) ? DialogAS : DialogH5;
    this.Dialog = Dialog;
    
    /**
     * 多媒体实例，有这些方法：createPlayer, createRecorder
     */
    this.Media = {
        /**
         * 创建播放器
         */
        createPlayer: function(){
            if (x.params.MODE == chivox.MODE.FLASH)
              Info.show("loadFlashPlayer");
            x.player = new chivox.AiPlayer({
                id: x.params.playerId,
                mode: x.params.mode,
                width: 1,
                height: 1,
                onFlashLoad: function(code, message){
                    if (x.params.MODE == chivox.MODE.FLASH)
                      Info.hide("loadFlashPlayer");
                },
                onError: function(code, message){
                    if (typeof x.params.onPlayerError == "function") {
                        x.params.onPlayerError(code, message);
                    }
                }
            });
        },
        /**
         * 创建录音机
         */
        createRecorder: function(){
            Info.show("loadFlashRecorder at: " + x.params.recorderId);
            var p = {
                id: x.params.recorderId,
                appKey: x.params.appKey,
                server: x.params.server,
                back_server: x.params.back_server,
                mode: x.params.mode,
                sigurl: x.params.sigurl,
                userId: x.params.data.serverParams.userId || "guest",
                wmode: x.params.flashWmode,
                coreTimeout: x.params.coreTimeout || 60000,
                language: x.params.language,
				        jssdkVersion: chivox.jssdkVersion,
                /**
                 * @ignore
                 */
                onFlashLoad: function(code, message){
                    Info.hide("loadFlashRecorder");
                },
                /**
                 * @ignore
                 */
                onMicStatusChange: function(code, message){
                    if (code == "50001") {
                        Info.show("micStatusAllow");
                    } else if (code == "50008") {
                        //do nothing
                    } else {
                        if (code == "50002") {
                            Info.show("micStatusDisallow");
                        } else if (code == "50003") {
                            Info.show("micStatusError");
                        } else if (code == "50007") {
                            Info.show("mmscfgError");
                        }
                        if (x.params.autoDetectMic) {
                            Dialog.open();
                        }
                    }
                    if (typeof x.params.onMicStatusChange == "function") {
                        x.params.onMicStatusChange(code, message);
                    }
                },
                /**
                 * @ignore
                 */
                onConnectorStatusChange: function(code, message){
                    if (code == "50109") {
                        Info.show("connectServerStart");
                    } else if (code == "50100") {
                        Info.show("connectServerSuccess");
                    } else if (code == "50101" || code == "50103" || code == "50104" || code == "connection.disconnected") {
                        Info.show("connectServerError");
                        x.recorder.reset();
                        ProgressBar.hide();
                        ProgressBar.reset();
                        ControlPanel.recordOff();
                        ControlPanel.replayDisabled();
                        if (code == "connection.disconnected") {
                            Info.show("connectServerInit");
                        }
                        if (x.params.autoDetectNetwork) {
                            Dialog.open();
                        }
                    }
                    if (typeof x.params.onConnectorStatusChange == "function") {
                        x.params.onConnectorStatusChange(code, message);
                    }
                },
                /**
                 * @ignore
                 */
                onError: function(code, message){
                    if (typeof x.params.onRecorderError == "function") {
                        x.params.onRecorderError(code, message);
                    }
                }
            };
            //ADDED CONFIG
            //connectLocalService
            //urlListServiceUrl
            //defaultAPIServiceUrlArray
            //localServiceUrl
            //latencyCheckServiceApplication
            var paramsArr = ["connectLocalService", "localServiceUrl", "latencyCheckServiceApplication"];
			for (var pk in paramsArr) {
				var foo = paramsArr[pk];
				if(typeof x.params[foo] != "undefined") {
					p[foo] = x.params[foo];
				}
			}

      console.info(p);
            x.recorder = new chivox.AiRecorder(p);
        }
    };
    var Media = this.Media;
    
    /**
     * @ignore
     */
    function main(){
        Media.createPlayer();
        Media.createRecorder();

        ai$(selector.rateButton).unbind("click").click(function(){
            var recordId = ai$(this).parent().find(x.params.cssSelector.record).attr("dataRecordId");
            if (recordId == "") {
                if (typeof x.params.onRateError == "function") {
                    x.params.onRateError();
                }
                return;
            }
            var rateId = "ratePanel" + new Date().getTime();
            var html = '';
            html += '<div id="' + rateId + '" class="ratePopup">';
            html += '  <p>我觉得这次评分太不准哦！</p>';
            html += '  <div class="feedbackForm">';
            //html += '<input type="hidden" name="recordId" value="' + x.lastRecordId + '" />';
            //html += '<input type="hidden" name="result" value="' + x.scoreData + '" />';
            //html += '    <label>参考文本：' + x.params.data.serverParams.refText + '</label><br />';
            html += '    <label>您的邮箱：<input class="email" type="text" name="email" value=""/></label><br/>';
            html += '    <label>* 备　注：<textarea class="feedback"></textarea></label><br/>';
            html += '    <div class="buttonTableDiv">';
            html += '      <table class="buttonTable" border="0" cellpadding="0" cellspacing="0"><tr>';
            html += '        <td align="center"><button class="submitButton">提交</button></td>';
            html += '        <td align="center"><button class="cancelButton">取消</button></td>';
            html += '      </tr></table>';
            html += '    </div>';//buttonTableDiv
            html += '  </div>';//feedbackForm
            html += '</div>';//ratePopup
            ai$(selector.panel).append(html);
            
            ai$("#" + rateId).show();
            ai$("#" + rateId).find(".submitButton").unbind("click").click(function(){
                if (ai$.trim(ai$("#" + rateId + " .feedback").val()) == "") {
                    alert("请在备注中描述具体的信息");
                    return false;
                }
                ai$("#" + rateId).hide();
                ai$.ajax({
                    url: "http://api.chivox.com/sdk-monitor/monitor/recordFeedback",
                    //url: "http://localhost:8090/aid201101/monitor/recordFeedback",
                    type: "GET",
                    data: {
                        recordId: recordId,
                        // refText: x.scoreData[recordId].params && x.scoreData[recordId].params.refText,
                        // result: x.scoreData[recordId],
                        email: ai$("#" + rateId + " .email").val(),
                        remarks: encodeURIComponent(ai$("#" + rateId + " .feedback").val())
                    },
                    dataType: "jsonp",
                    success: function(){
                        ai$("#" + rateId).remove();
                    }
                });
            });
            ai$("#" + rateId).find(".cancelButton").unbind("click").click(function(){
                ai$("#" + rateId).remove();
            });
        });
        ai$(selector.okButton).unbind("click").click(function(){
            Dialog.close();
        });
        ai$(selector.dialogCloseButton).unbind("click").click(function(){
            Dialog.close();
        });

        if (x.params.mode == chivox.MODE.HTML5)
          Dialog.open();
    }
    main();
    
    var ProgressBar = {
        __el: null,
        __duration: 0,
        __intervalId: null,
        __startTime: 0,
        __clear: function(){
            var x = this;
            x.__duration = 0;
            x.__startTime = 0;
            if (x.__intervalId != null) {
                window.clearInterval(x.__intervalId);
                x.__intervalId = null;
            }
        },
        /**
         * @ignore
         * @param {int} duration
         */
        start: function(duration, el){
            var instance = this;
            instance.__clear();
            instance.__duration = duration;
            instance.__el = el;
            instance.__startTime = +new Date();
            var w = ai$(el).parent().find(selector.recordProgressBar).width();
            var p = w / duration;
            ai$(el).parent().find(selector.recordProgressBar).show().find(".text").show();
            instance.__intervalId = window.setInterval(function(){
                var v = (+new Date() - instance.__startTime) * p;
                if (v >= w) {
                    ai$(el).parent().find(selector.recordProgressBar).find(".value").width("100%");
                } else {
                    ai$(el).parent().find(selector.recordProgressBar).find(".value").width(v);
                }
            }, 100);
        },
        
        /**
         * @ignore
         * @param {int} duration
         */
        stop: function(){
            var instance = this;
            instance.__clear();
            ai$(instance.__el).parent().find(selector.recordProgressBar).find(".text").hide();
            ai$(instance.__el).parent().find(selector.recordProgressBar).hide();
            ai$(instance.__el).parent().find(selector.recordProgressBar).find(".value").width("0%");
        },
        
        /**
         * @ignore
         * @param {int} duration
         */
        reset: function(){
            var instance = this;
            instance.__clear();
            ai$(selector.recordProgressBar).find(".value").width("0%");
        },
        
        /**
         * @ignore
         * @param {int} duration
         */
        hide: function(){
            ai$(selector.recordProgressBar).find(".text").hide();
            ai$(selector.recordProgressBar).hide();
        }
    };
    this.ProgressBar = ProgressBar;
    
    var ControlPanel = {
        /**
         * @ignore
         */
        playOff: function(){
            ai$(selector.play).removeClass("playOn").addClass("playOff");
        },
        /**
         * @ignore
         */
        playOn: function(el){
            if (typeof el != "undefined") {
                ai$(el).removeClass("playOff").addClass("playOn");
            } else {
                ai$(selector.play).removeClass("playOff").addClass("playOn");
            }
        },
        /**
         * @ignore
         */
        recordOff: function(){
            ai$(selector.record).removeClass("recordOn").addClass("recordOff");
        },
        /**
         * @ignore
         */
        recordOn: function(el){
            if (typeof el != "undefined") {
                ai$(el).removeClass("recordOff").addClass("recordOn");
            } else {
                ai$(selector.record).removeClass("recordOff").addClass("recordOn");
            }
        },
        /**
         * @ignore
         */
        replayDisabled: function(el){
            if (typeof el != "undefined") {
                ai$(el).removeClass("replayOff replayOn").addClass("replayDisabled").parent().find(x.params.cssSelector.record).attr("dataRecordId", "");
            } else {
                ai$(selector.replay).removeClass("replayOff replayOn").addClass("replayDisabled").parent().find(x.params.cssSelector.record).attr("dataRecordId", "");
            }
        },
        /**
         * @ignore
         */
        replayOff: function(el){
            if (typeof el != "undefined") {
                ai$(el).removeClass("replayDisabled replayOn").addClass("replayOff");
            } else {
                ai$(selector.replay).removeClass("replayDisabled replayOn").addClass("replayOff");
            }
        },
        /**
         * @ignore
         */
        replayOn: function(el){
            if (typeof el != "undefined") {
                ai$(el).removeClass("replayDisabled replayOff").addClass("replayOn");
            } else {
                ai$(selector.replay).removeClass("replayDisabled replayOff").addClass("replayOn");
            }
        }
    };
    
    /**
     * @ignore
     */
    x.resetStatus = function(playEl, recordEl, replayEl){
        x.player.reset();
        x.recorder.reset();
        ProgressBar.hide();
        ProgressBar.reset();
        ControlPanel.playOff();
        ControlPanel.recordOff();
        if (typeof playEl == "undefined" && typeof recordEl == "undefined" && typeof replayEl == "undefined") {
            ControlPanel.replayDisabled();
        } else {
            ai$(selector.replay).each(function(){
                if (!ai$(this).hasClass("replayDisabled")) {
                    ControlPanel.replayOff(this);
                }
            });
            if (typeof recordEl != "undefined" && recordEl != null) {
                ControlPanel.replayDisabled(ai$(recordEl).parent().find(x.params.cssSelector.replay)[0]);
            }
        }
        
        if (typeof x.params.onReset == "function") {
            x.params.onReset();
        }
    }
    
    function bindPlayEvent(){
        ControlPanel.playOff();
        //var playDelay = null;
        ai$(selector.play).unbind("click").click(function(){
            //if (playDelay != null) {
            //    clearTimeout(playDelay);
            //    playDelay = null;
            //}
            var el = this;
            //playDelay = setTimeout(function(){
            if (!x.player.canPlay && x.params.mode == chivox.MODE.FLASH) {
                Dialog.open();
                ControlPanel.playOff();
                if (typeof x.params.onError == "function") {
                    x.params.onError("PLAYER_NOT_READY");
                }
                return;
            }
            if (ai$(el).hasClass("playOn")) {
                ControlPanel.playOff();
                x.player.reset();
            } else {
                if (typeof x.params.onBeforePlay == "function") {
                    x.params.onBeforePlay(el);
                }
                x.resetStatus(el, null, null);
                ControlPanel.playOn(el);
                //console.debug('[ bindPlayEvent:click ]:......');
                x.player.load({
                    url: x.params.data.audioUrl,
                    success: function(code, message){
                        if (ai$(el).hasClass("playOn")) {
                            x.player.play({
                                position: x.params.data.playPosition,
                                duration: x.params.data.playDuration,
                                onStart: function(code, message){
                                },
                                onStop: function(code, message){
                                  //console.info('[ bindPlayEvent:onStop ]:......');
                                    ControlPanel.playOff();
                                    if (typeof x.params.onAfterPlay == "function") {
                                        x.params.onAfterPlay();
                                    }
                                }
                            });
                        }
                    }
                });
            }
            //}, 400);
        });
    }
    bindPlayEvent();
    
    /**
     * @ignore
     */
    function getLastScore(el){
        if (x.lastRecordId != "") {
            if (typeof x.params.onBeforeScore == "function") {
                x.params.onBeforeScore(el);
            }
            //(function(el){
            x.recorder.getScores({
                recordId: x.lastRecordId,
                success: function(data){
                    if (x.lastRecordId == "" || typeof data[x.lastRecordId] == "undefined") {
                        return;
                    }
                    x.scoreData[x.lastRecordId] = JSON.stringify(data[x.lastRecordId]);
                    ai$(el).parent().find(x.params.cssSelector.rateButton).show();
                    var result = data[x.lastRecordId].result;
                    if (typeof result == "undefined") {
                        if (typeof x.params.onScoreError == "function") {
                            //add server error check
                            var errId = data[x.lastRecordId].errId;
                            if (typeof errId == "undefined") {
                                x.params.onScoreError("TIMEOUT", el);
                            } else {
                                x.params.onScoreError(errId, el);
                            }
                        }
                        
                    } else if ((result != null) &&
                    (typeof result.error != "undefined" && typeof result.error.errMsg != "undefined" &&
                        typeof result.errID != "undefined")) {
                        if (typeof x.params.onScoreError == "function") {
                            chivox.AiStatusCode.trySet(result.errID, result.error.errMsg);
                            x.params.onScoreError(result.errID, el);
                        }
                        
                    } else {
                        ControlPanel.replayOff(ai$(el).parent().find(x.params.cssSelector.replay));
                        if (typeof x.params.onScore == "function") {
                            x.params.onScore(data[x.lastRecordId], el);
                        }
                    }
                }
            });
            //})(el);
        
        } else {
            if (typeof x.params.onScoreError == "function") {
                x.params.onScoreError("NO_DATA");
            }
        }
    }
    
    function bindRecordEvent(){
        ControlPanel.recordOff();
        ai$(selector.record).unbind("click").click(function(){
            var el = this;
            if (!x.recorder.canRecord) {
                Dialog.open();
                ControlPanel.recordOff();
                ControlPanel.replayDisabled();
                if (typeof x.params.onError == "function") {
                    x.params.onError("RECORDER_NOT_READY");
                }
                return;
            }
            if (ai$(this).hasClass("recordDisabled")) {
                return;
            }
            if (ai$(this).hasClass("recordOff")) {//startRecord
                x.lastRecordId = "";
                ai$(el).attr("dataRecordId", "");
                x.scoreData = {};
                ai$(selector.rateButton).hide();
                x.resetStatus(null, el, null);
                
                if (typeof x.params.onBeforeRecord == "function") {
                    x.params.onBeforeRecord(el);
                }
                
                var duration = 2000;
                var coreType = x.params.data.serverParams.coreType;
                if (x.params.data.duration) {
                    duration = x.params.data.duration;
                } else {
                    if (coreType == "cn.word.score" || coreType == "cn.sent.score") {
                        duration = 2000 + ai$.trim(x.params.data.serverParams.refText).split("-").length * 600;
                    } else if (coreType == "en.word.score" || coreType == "en.sent.score") {
                        duration = 2000 + ai$.trim(x.params.data.serverParams.refText).split(" ").length * 600;
                    }
                }
                
                x.recorder.record({
                    duration: duration,
                    playNotifyAudio: x.params.data.playNotifyAudio,
                    serverParams: x.params.data.serverParams,
                    onRecordIdGenerated: function(code, message){
                        x.lastRecordId = message.recordId;
                        ai$(el).attr("dataRecordId", message.recordId);
                        if (typeof x.params.onRecordIdGenerated == "function") {
                            x.params.onRecordIdGenerated(code, message);
                        }
                    },
                    onStart: function(code, message){
                        ControlPanel.recordOn(el);
                        ProgressBar.start(duration, el);
                        if (typeof x.params.onRecordStart == "function") {
                            x.params.onRecordStart(el);
                        }
                        
                    },
                    onStop: function(code, message){
                        ControlPanel.recordOff();
                        ProgressBar.stop();
                        getLastScore(el);
                        if (typeof x.params.onAfterRecord == "function") {
                            x.params.onAfterRecord();
                        }
                    },
                    onInternalScore: function(code, message){
                        if (typeof x.params.onInternalScore == "function") {
                            x.params.onInternalScore(message);
                        }
                    }
                });
                
            } else {//stopRecord
                ProgressBar.stop();
                ControlPanel.recordOff();
                x.recorder.stop({
                    onStop: function(code, message){
                        if (typeof x.params.onAfterRecord == "function") {
                            x.params.onAfterRecord();
                        }
                        getLastScore(el);
                    }
                });
            }
        });
    }
    bindRecordEvent();
    
    function bindReplayEvent(){
        ControlPanel.replayDisabled();
        ai$(selector.replay).unbind("click").click(function(){
            var el = this;
            if (!x.recorder.canRecord) {
                ControlPanel.recordOff();
                ControlPanel.replayDisabled();
                Dialog.open();
                if (typeof x.params.onError == "function") {
                    x.params.onError("RECORDER_NOT_READY");
                }
                return;
            }
            if (!ai$(this).hasClass("replayDisabled")) {
                var recordId = ai$(this).parent().find(x.params.cssSelector.record).attr("dataRecordId");
                if (recordId != "") {
                    if (ai$(this).hasClass("replayOff")) {
                        if (typeof x.params.onBeforeReplay == "function") {
                            x.params.onBeforeReplay(el);
                        }
                        x.resetStatus(null, null, el);
                        ControlPanel.replayOn(el);

                        var replayParams = {
                            recordId: recordId,
                            onStop: function(){
                                ControlPanel.replayOff(el);
                                if (typeof x.params.onAfterReplay == "function") {
                                    x.params.onAfterReplay();
                                }
                            }
                            //onError: function(code, message){                //回放出错
                            //    ControlPanel.replayOff(el);
                            //    if (typeof x.params.onRecorderError == "function") {
                            //        x.params.onRecorderError(code, message);
                            //    }
                            //}
                        };

                        //startPos,stopPos,expand
                        if(ai$("#replayStartPos")[0] && ai$("#replayStopPos")[0]) {
                            ai$(this).parent().find(x.params.cssSelector.record).attr("dataReplayStartPos", ai$("#replayStartPos").val());
                            ai$(this).parent().find(x.params.cssSelector.record).attr("dataReplayStopPos", ai$("#replayStopPos").val());
                        }

                        if(ai$("#replayExpand")[0]) {
                            ai$(this).parent().find(x.params.cssSelector.record).attr("dataReplayExpand", ai$("#replayExpand").val());
                        }

                        var startPos = ai$(this).parent().find(x.params.cssSelector.record).attr("dataReplayStartPos");
                        var stopPos = ai$(this).parent().find(x.params.cssSelector.record).attr("dataReplayStopPos");
                        var expand = ai$(this).parent().find(x.params.cssSelector.record).attr("dataReplayExpand");

                        if(startPos && stopPos) {
                            replayParams['startPos']   = startPos;
                            replayParams['stopPos']    = stopPos;
                        }

                        if(expand) {
                            replayParams['expand'] = expand;
                        }
                        
                        // startReplay
                        x.recorder.startReplay(replayParams);
                    } else {
                        ControlPanel.replayOff(el);
                        x.recorder.stopReplay({
                            onStop: function(){
                                if (typeof x.params.onAfterReplay == "function") {
                                    x.params.onAfterReplay();
                                }
                            }
                        });
                    }
                }
            }
        });
    }
    bindReplayEvent();
    
    /**
     * 页面节点改变后，重新绑定事件
     */
    this.rebind = function(){
        bindPlayEvent();
        bindRecordEvent();
        bindReplayEvent();
    }
};

/**
 * 切换当前显示的内容时，需要重新设置数据
 * @param {object} data
 */
chivox.AiPanel.prototype.setData = function(data){
    var x = this;
    // x.lastRecordId = "";
    x.scoreData = {};
    ai$(x.selector.rateButton).hide();
    x.resetStatus();
    if (typeof data != "undefined") {
        x.params.data = data;
    }
}

chivox.AiPanel.prototype.dispose = function(){
    if (this.player && this.player._audioContext) {
        this.player._audioContext.close();
        this.player._audioContext = null;
    }

    if (this.recorder && this.recorder.engine && this.recorder.engine.audioContext) {
        this.recorder.engine.audioContext.close();
        this.recorder.engine.audioContext = null;
    }

    if (this.recorder && this.recorder.vAudioCtx) {
        this.recorder.vAudioCtx.close();
        this.recorder.vAudioCtx = null;
    }
}
