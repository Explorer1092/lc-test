/*
 * 录音组件
 */

var AudioRecorders = require("./audioRecorders.js");

function VKAudioRecorder() {
  var status = null; // recording, pausing, stoped
  var _recordingCb;
  var _stopCb;
  var _pauseCb;
  var _exportCb;
  var audioBlob;
  var blobReturned = false;

  this.init = init;
  this.recorderCore = null;
  this.isSupport = isSupport;
  this.start = start;
  this.pause = pause;
  this.stop = stop;
  this.onRecording = function(cb) {
    _recordingCb = cb;
  };
  this.onStoped = function(cb) {
    _stopCb = cb;
  };
  this.onPaused = function(cb) {
    _pauseCb = cb;
  };

  this.exportBlob = function(cb) {
    blobReturned = false;
    _exportCb = cb;

    //TODO 判断audioBlob是否已经生成
    if (audioBlob) {
      blobReturned = true;
      cb(audioBlob);
      audioBlob = null;
    }
  };

  var that = this;

  function init(cb) {
    isSupport(function(support) {
      if (!support) return cb(getError("notSupport"));

      cb();
    });
  }

  function isSupport(cb) {
    AudioContext = window.AudioContext || window.webkitAudioContext;
    if (!AudioContext) return cb(false);

    // 初始化audio recorder，以便检查是否支持
    initAudio(function(err) {
      cb(err ? false : true);
    });
  }

  function start() {
    status = "recording";
    that.recorderCore.startRecord();
  }

  function stop() {
    status = "stop";
    that.recorderCore.stopRecord();
    that.recorderCore.clear();

    if (_stopCb) _stopCb();
  }

  function pause() {
    status = "pausing";
    that.recorderCore.stopRecord();

    if (_pauseCb) _pauseCb();
  }

  function initAudio(cb) {
    _log("initAudio");
    if (!navigator.getUserMedia) {
      navigator.getUserMedia =
        navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    }
    if (!navigator.cancelAnimationFrame) {
      navigator.cancelAnimationFrame =
        navigator.webkitCancelAnimationFrame ||
        navigator.mozCancelAnimationFrame;
    }
    if (!navigator.requestAnimationFrame) {
      navigator.requestAnimationFrame =
        navigator.webkitRequestAnimationFrame ||
        navigator.mozRequestAnimationFrame;
    }

    navigator.getUserMedia(
      {
        audio: {
          mandatory: {
            googEchoCancellation: "false",
            googAutoGainControl: "false",
            googNoiseSuppression: "false",
            googHighpassFilter: "false"
          },
          optional: []
        }
      },
      function(stream) {
        initRecorederCore(stream);
        cb();
      },
      function(e) {
        cb("get audio recorder error");
      }
    );
  }

  function initRecorederCore(stream) {
    var config = {
      exportAudio: "wav",
      streamNum: 51
    };

    that.recorderCore = new AudioRecorders(stream, config);

    // 接收音频流
    that.recorderCore.onStreamProcessor = function(buffer) {
      if (status !== "recording") {
        _log("status is not recording, it's: ", status);
        return;
      }

      if (_recordingCb) _recordingCb(buffer);
    };

    // 接收最终的音频数据
    that.recorderCore.onReceiveAudioBlob = function(blob) {
      audioBlob = blob;

      // 首先检测exportCb方法是否已经传入
      if (!blobReturned && _exportCb) {
        blobReturned = false;
        _exportCb(blob);
        audioBlob = null;
      }
    };
  }

  function _log() {
    if (
      !(window._vkm_debug === true || window._vkm_audio_recorder_debug === true)
    )
      return;

    var args = Array.prototype.slice.call(arguments);
    args.unshift(new Date().toLocaleString());
    args.unshift("AudioRecorder");
    console.debug.apply(console, args);
  }

  function getError(type) {
    var map = {
      notSupport: { code: 902001, message: "not supported" }
    };

    return map[type] || { code: 902999, message: "unexpected error" };
  }
}

module.exports = VKAudioRecorder;
