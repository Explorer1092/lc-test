import storage from './utils/index'
import formurlencoded from 'form-urlencoded'
import Velocity from 'velocity-animate'
import axios from '../utils/_vkaxios'

import { routerRecord } from './routerRecord'
import moduleList from './moduleList.js'

const routerMap = moduleList.prod
let currentModule = ''
const hasRegister = []
/* eslint-disable */
function runtime ({router, i18n, utils, cookies}) {
  window.VK = {
    storage,
    openNewRouter: true,
    utils,
    cookies,
    Velocity,
    formurlencoded,
    axios,
    registerRouter(name, routers){
      console.log('注册的路由：')
      console.log(routers)
      if(hasRegister.includes(name)){
        return console.log(`${name}注册路由已注册`)
      }

      if(!Array.isArray(routers)){
			  return console.log(`${name}注册路由传入routers 不是Array类型`)
      }

      if(!routerMap[name]){
			  console.log(`${name}模块没有注册`)
      }
      
      const routersCopy = []
      const reg = new RegExp("^\\/" + name)

      routers.forEach((item)=>{
			  if(reg.test(item.path)){
			    //item.path = "/" + name + item.path
			    routersCopy.push(item)
			  }else{
			    console.log(`${item.path} 没有添加模块名 ${name}`)
			  }
      })

      router.addRoutes(routersCopy)
      currentModule = name
    },
    push(option){
      if(option.name && !option.path){
			  return console.log("不支持 name 跳转" )
      }
      //option.path = '/' + mod + option.path
      router.push(option)
    },
    go(number){
      router.go(number)
    },
    backMod(){
      const currentMod = routerRecord[routerRecord.length - 1]
        .replace(/(.*)\?.*/,'$1')
        .replace(/\/([^\/]*).*/,'$1')

      //let num = 2
      while(routerRecord.length > 1){
        const modName = routerRecord[routerRecord.length - 2]
          .replace(/(.*)\?.*/,'$1')
          .replace(/\/([^\/]*).*/,'$1')

        routerRecord.pop()

        if(modName !== currentMod){
          break
        }
      }
      router.replace(routerRecord[routerRecord.length - 1])
    },
    replace(option){
      if(option.name && !option.path){
        return console.log("不支持 name 跳转" )
      }
      //option.path = '/' + mod + option.path
      router.replace(option)
    },
    preModLastPage(){},
    preModFirstPage(){},
    pushLang(lang, packages){
      //i18n.setLocaleMessage(lang, packages)
    }
  }
}

export default runtime



/* eslint-enable */
