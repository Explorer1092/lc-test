import moduleList from './moduleList'
const routerMap = moduleList.prod

const loadedJsList = {}
/**
 * load js
 * @author mengdehua
 * @DateTime 2018-08-17
 * @param    {string}   src   js address
 * @param    {string}   name  child module name
 * @param    {boolean}   iScatch 是否缓存这个 默认 flase
 * 
 * @return   {object}         一个promise对象
 * 
 */
const loadJs = (src, name, iScatch)=>{
  const scriptTag = document.createElement('script')
  scriptTag.type = "text/javascript"
  
  if(loadedJsList[name] && (loadedJsList[name].loadStatus === 'loading' || loadedJsList[name].loadStatus === 'loaded')){
    return new Promise((res, rej)=>{
      res(name)
    })
  }
  src = src + '?v=' + (new Date()).getTime()
  loadedJsList[name] = {
    loadStatus:'loading'
  }
  return new Promise((resovle, reject)=>{
    scriptTag.onload = function(){
      loadedJsList[name].loadStatus = 'loaded'
      resovle(name)
    }
    scriptTag.onerror = function (){
      //缺少 加载失败 重新尝试加载 逻辑
      loadedJsList[name].loadStatus = 'err'
      reject()
    }

    scriptTag.src = src
    document.head.appendChild(scriptTag)
  })
}

const loadModule = ({name, src}, routerName)=>{
  if(name && src){
    return loadJs(src, name)
      .then((name)=>{

        let childName = routerMap[name].name
        let childConfig = window.VK[childName]

        if(!childConfig){
          return new Promise((res, rej)=>{
            res(`${name}子模块没有添加 window.VK.${childName}`)
          })
        }

        if(!childConfig.src){
          return new Promise((res, rej)=>{
            res(`${name}子模块没有在window.VK.${childName}上添加 src`)
          })
        }

        if(loadedJsList.indexOf(childConfig.src) > -1){
          return new Promise((res, rej)=>{
            res(`${name}子模块的js： ${childConfig.src} 已经加载过`)
          })
        }
      
        return loadJs(childConfig.src, name, true)
      })
  }else if(name){
    return new Promise((res, rej)=>{
      res(`${name}子模块中src配置有问题`)
    })
  }else{
    return new Promise((res, rej)=>{
      res(`routerMap没有配置${routerName}的name`)
    })
  }
}

export {
  loadModule
}
