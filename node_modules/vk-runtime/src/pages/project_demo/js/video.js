import axios from 'axios'
export default class Video {
  static index() {
    return {
      data(){
        return {
          // 当前播放dom对象
          currentPlayer: null,
          isPlaying: false
        }
      },
      methods: {
        // 播放加全屏
        fullscreenPlay(video){
          if (!video || !video.addEventListener) {
            return
          }
          this.currentPlayer = video
          this.bindVideoEvent()
          this.play()
          // this.launchFullscreen(this.currentPlayer)
        },
        // 绑定事件
        bindVideoEvent(){
          this.currentPlayer.addEventListener("webkitfullscreenchange", this.onFullscreenChange, false)
          this.currentPlayer.addEventListener("fullscreenchange", this.onFullscreenChange, false)
          this.currentPlayer.addEventListener("ended", this.onEnded, false)
          this.currentPlayer.addEventListener("onplaying", this.onPlaying, false)
          this.currentPlayer.addEventListener("onprogress", this.onPlaying, false)
          this.currentPlayer.addEventListener("pause", this.onPause, false)
        },
        // 销毁事件
        unbindVideoEvent(){
          if (!this.currentPlayer) {
            return
          }
          this.currentPlayer.removeEventListener("webkitfullscreenchange", this.onFullscreenChange, false)
          this.currentPlayer.removeEventListener("fullscreenchange", this.onFullscreenChange, false)
          this.currentPlayer.removeEventListener("onplaying", this.onPlaying, false)
          this.currentPlayer.removeEventListener("onprogress", this.onPlaying, false)
          this.currentPlayer.removeEventListener("ended", this.onEnded, false)
          this.currentPlayer.removeEventListener("pause", this.onPause, false)
        },
        // 暂停当前视频
        play(){
          this.currentPlayer.play()
          this.onPlaying()
        },
        // 暂停当前视频
        pause(){
          this.currentPlayer.pause()
        },
        onFullscreenChange(){
          if (!this.currentPlayer || !this.currentPlayer.addEventListener) {
            return
          }
          if (!document.webkitIsFullScreen) { //退出全屏暂停视频
            this.pause()
            this.isPlaying = false
          }
        },
        // 進入全屏
        launchFullscreen(element) {
          //此方法不可以在異步任務中執行，否則火狐無法全屏
          if (element.requestFullscreen) {
            element.requestFullscreen()
          } else if (element.mozRequestFullScreen) {
            element.mozRequestFullScreen()
          } else if (element.msRequestFullscreen) {
            element.msRequestFullscreen()
          } else if (element.oRequestFullscreen) {
            element.oRequestFullscreen()
          } else if (element.webkitRequestFullscreen) {
            element.webkitRequestFullScreen()
          } else {
            // var docHtml = document.documentElement
            // var docBody = document.body
            // var videobox = document.getElementById('videobox')
            // var cssText = 'width:100%;height:100%;overflow:hidden;'
            // docHtml.style.cssText = cssText
            // docBody.style.cssText = cssText
            // videobox.style.cssText = cssText + ';' + 'margin:0px;padding:0px;'
            // document.IsFullScreen = true
          }
        },
        onEnded() {
          if (this.isUnUpload) {
            this.track('learning_click', 'endTeachingVideo')
          } else if(this.isUploaded) {
            this.track('learning_click', 'endMyVideo')
          }
          this.isPlaying = false
          this.isPlayEnded = true
        },
        togglePlay(){
          if (!this.currentPlayer) {
            return
          }
          if (this.isPlaying) {
            this.pause()
          } else {
            this.play()
          }
        },
        onPause() {
          this.isPlaying = false
        },
        onPlaying() {
          this.isPlayEnded = false
          this.isPlaying = true
          this.isHaventPlayed = false
        },
        videoDestroy() {
          this.unbindVideoEvent()
          this.currentPlayer = null
        }
      }
    }
  }
}
