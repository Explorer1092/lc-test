import axios from 'axios'
export default class Function {
  static index() {
    return {
      methods: {
      	//PD大赛首页赛事
      	//数据规律需要整理
      	getPDIndexData(callback){
	        axios.get(`/rest/activity/api/activity/user/activity/getActivityInfo/1/20`)
	          .then((res) => {
	            callback(res)
	          })
	          .catch((err) => {
	            this.loading = false
	            this.netError = true
	          })
      	},
      	arrowClick(direction){
      		this.$playSound("click")
	        if (direction === 'left') {
	        	if (this.activityArr.length == 2) {
	        		this.isAtLeftEnd = true
        			this.isAtRightEnd = false
	        		this.index = 0
	        		this.$refs.swiper_container.style.transform = `translateX(230px)`
	        		if (this.paddingFlag) {
	        			this.$refs.swiper_container.style.transform = `translateX(310px)`
	        		}
	        		return
	        	}
	        	let tmp = this.index - 1
	          if (tmp === 0) {
	          	this.$refs.swiper_container.style.transitionDuration = '0s'
	          	this.hasDuration = false
		            if (this.paddingFlag) {
		            	this.$refs.swiper_container.style.transform = `translateX(-${(this.activityArr.length + 1) * 460 - 1750}px)`
		            }else{
		            	this.$refs.swiper_container.style.transform = `translateX(-${this.activityArr.length * 460 - 1180}px)`
		            }
		            setTimeout(()=> {
		            	this.$refs.swiper_container.style.transitionDuration = '1s'
		            	this.hasDuration = true
		            	this.index--
				          let n = this.$refs.swiper_container.style.transform.replace(/[^0-9]/ig,"")
				          let m = Number(n)-460
				          this.$refs.swiper_container.style.transform = `translateX(-${m}px)`
				        },20)
		            this.index = this.activityArr.length - 2
	          }else{
	            this.index--
	            let n = this.$refs.swiper_container.style.transform.replace(/[^0-9]/ig,"")
	            let m = Number(n)-460
	            this.$refs.swiper_container.style.transform = `translateX(-${m}px)`
	          }
	        }else{
	        	if (this.activityArr.length == 2) {
	        		this.isAtLeftEnd = false
        			this.isAtRightEnd = true
	        		this.index = 1
	        		this.$refs.swiper_container.style.transform = `translateX(-230px)`
	        		if (this.paddingFlag) {
	        			this.$refs.swiper_container.style.transform = `translateX(-310px)`
	        		}
	        		return
	        	}
	        	let tmp = this.index + 1
	        	let _tmp = this.activityArr.length - 1
	        	if (tmp === _tmp) {
	        		this.$refs.swiper_container.style.transitionDuration = '0s'
	        		this.hasDuration = false
	            this.index = 1
	            this.$refs.swiper_container.style.transform = `translateX(-${this.startTranslateX-460}px)`
		          setTimeout(()=> {
		            this.$refs.swiper_container.style.transitionDuration = '1s'
		            this.hasDuration = true
		            this.index++
		            let n = this.$refs.swiper_container.style.transform.replace(/[^0-9]/ig,"")
	            	let m = Number(n)+460
	            	this.$refs.swiper_container.style.transform = `translateX(-${m}px)`
		          },20)
	          }else{
	            this.index++
	            let n = this.$refs.swiper_container.style.transform.replace(/[^0-9]/ig,"")
	            let m = Number(n)+460
	            this.$refs.swiper_container.style.transform = `translateX(-${m}px)`
	          }
	        }
      	},
      	goLeftScroll(){
	        if (this.$refs.pd_container.scrollLeft > this.scrollLenght) {
	          this.$refs.pd_container.scrollLeft -= 35
	          this.scrollLeft = this.$refs.pd_container.scrollLeft
	        }else{
	        	this.nextScroll = true
	          clearInterval(this.timer1)
	        }
      	},
      	goRightScroll(){
	        if (this.$refs.pd_container.scrollLeft < this.scrollLenght) {
	          this.$refs.pd_container.scrollLeft += 35
	          this.scrollLeft = this.$refs.pd_container.scrollLeft
	        }else{
	        	this.nextScroll = true
	          clearInterval(this.timer1)
	        }
      	},
      	userSrollDown(evt){
      		if (evt.wheelDeltaX > 10 && !this.isAtLeftEnd) {
          	this.arrowClick('left')
	        }else if(evt.wheelDeltaX < -10 && !this.isAtRightEnd){
	          this.arrowClick('right')
	        }
      	},
      	turn(i,id){
      		this.$playSound("click")
      		if(this.index === i){
      			sa.track('learning_click', {'click_id': `pc_learning_activity_competition_arena_enter_competition_id_${id}`})
            //由于 /project_detail 页面是keepalive，此处用重定向防止页面数据不刷新
            window.location.href = `/project_detail/${id}`
      		}else{
      			if (i < this.index) {
      				this.arrowClick('left')
      			}
      			if (i > this.index) {
      				this.arrowClick('right')
      			}
      		}
      	}
      }
    }
  }
  static detail(){
  	return{
  		methods: {
  			getDetailByPid(activityId,callback){
	  			axios.get(`/rest/activity/api/activity/user/activity/getActivityDetailByActivityId/${activityId}`)
	  			.then((res) => {
	  				callback(res)
	  			})
	  			.catch((res) => {
	  				this.netError = true
	  				this.loading = false
	  				callback(res)
	  			})
  			}
  		}
  	}
  }
}
