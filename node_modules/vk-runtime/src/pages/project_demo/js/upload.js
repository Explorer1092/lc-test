import VVOS from "vvos-js"
import axios from 'axios'
export default class Upload {
  static ipad() {
    return {
      methods: {
        initVKAppBridge() {
          window.VKAppBridge = {}
          window.VKAppBridge['receiveFromNative'] = (iosRes) => {
            let data = JSON.parse(iosRes)
            if (data.data.code === 0) {
              this.imgSrc = data.data.cover_url
              this.videoURL = data.data.video_url
              this.videoSize = data.data.video_size
              this.preview = true
            }
            this.count = 0
            // do something
          }
        }
      }
    }
  }
  static pc() {
    return {
      methods: {
        createIMG(video) {
          let scale = 0.25
          let canvas = document.createElement("canvas")
          let canvasFill = canvas.getContext('2d')
          canvas.width = video.videoWidth * scale
          canvas.height = video.videoHeight * scale
          canvasFill.drawImage(video, 0, 0, canvas.width, canvas.height)
          return canvas.toDataURL("image/jpeg")
        },
        // 本地上传文件判断以及生成缩略图
        fileChange() {
          let windowURL = window.URL || window.webkitURL
          let file = this.$refs.file.files[0]
          this.isMp4 = file.type.indexOf("mp4") > -1
          // 文件大小限制
          if (file.type.indexOf("mp4") == -1 && file.type.indexOf("wmv") == -1 && file.type.indexOf("quicktime") == -1) {
            this.$refs.file.value = ""
            this.dinoTips = true
            this.dinoTipsText = '电脑上传目前只支持.mov.mp4.wmv 三种格式，请您重新选择~'
            setTimeout(() => {
              this.dinoTips = false
            }, 3000)
            return
          }
          if (file.size > 200000000) {
            this.$refs.file.value = ""
            this.dinoTips = true
            this.dinoTipsText = '该视频过大，请选择其他视频'
            setTimeout(() => {
              this.dinoTips = false
            }, 2000)
            return
          }
          // 缩略图
          setTimeout(() => {
            this.imgSrc = this.createIMG(this.$refs.video)
            if (this.imgSrc == 'data:,') {
              this.isMp4 = false
              this.cantDecode = true
            }
          }, 200)
          // 视频URL
          this.videoURL = windowURL.createObjectURL(this.$refs.file.files[0])
          this.preview = true
        },
        uploadWork() {
          this.rule = false
          if (!this.videoURL)
            return
          if (this.$refs.file.files[0]) {
            this.uploadFile()
          }
        },
        uploadFile() {
          let file = this.$refs.file.files[0]
          this.uploading = true
          const getToken = "/rest/activity/api/activity/user/upload/getToken"
          const uploadComplete = "/rest/activity/api/activity/user/upload/uploadComplete"
          let upload = new VVOS({
            api: {
              gettoken: getToken,
              notifier: uploadComplete
            },
            cover: true,
            client: 'vos-js.sdk 1.0.0.0'
          })
          upload.addfiles([file])
          upload.submit({
            header: {
              status: this.cantDecode ? 1 : 0
            },
            gettoken: {
              status: this.cantDecode ? 1 : 0
            },
            notifier: {
              resourceType: 1,
              mp4: this.isMp4,
              name: this.$refs.text.value,
              coverImage: null,
              activityId: this.$route.params.pdId,
              partitionId: this.partitionId,
              activityType: this.activityType
            }
          }, (err, data) => {
            if (err) {
              this.fail = true
              this.progress = 'Oops!'
              this.uploadText = '上传失败'
            } else if (data && data.data.code === 0) {
              this.preview = false
              this.videoId = data.data.data.id
              this.uploading = false
              this.canJoin = true
            } else if (data && data.data.code === 100027) {
              this.fail = true
              this.progress = 'Oops!'
              this.uploadText = '抱歉，该视频已经参加过其他大赛，请您另选一个视频参赛哦！'
            } else if (data && data.data.code === 100032) {
              this.fail = true
              this.progress = 'Oops!'
              this.uploadText = '抱歉，该视频已被其他用户上传参赛，请您另选一个视频参赛哦！'
            } else if (data && data.data.code === 100033) {
              this.fail = true
              this.progress = 'Oops!'
              this.uploadText = '抱歉，该视频之前上传过但并未通过审核，请您另选一个视频参赛哦！'
            } else {
              this.fail = true
              this.progress = 'Oops!'
              this.uploadText = '上传失败'
            }
          }, (err, process) => {
            if (process) {
              if (process.process) {
                this.progress = Math.floor(process.process * 100) + '%'
              } else {
                this.progress = '99%'
              }
            }

          })
        },
        processUpdate() {
          // 	if (this.progress === '100%') {

          // 	}
          // 	this.processTimer = setInterval(() => {
          //   this.progress = (parseInt(this.progress) + 20) + '%'
          // }, 1000)

        }
      }
    }
  }
}
