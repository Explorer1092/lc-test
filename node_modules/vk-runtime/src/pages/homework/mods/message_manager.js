import cookies from 'cookies-js'

let isFromApp = cookies.get('isFromApp')
let cb = null
let messagePostOffice = function () {
  this.createMessageManager = function (receiveMessageCallback) {
    if (isFromApp) {
      let postOffice = new ipadPostOffice()
      postOffice.receiveMessageCallback = receiveMessageCallback
      // 初始化ipad消息
      // postOffice.sendMessage(postOffice.ipadCommunication.loadingStop) 注释页面加载完调用，改为作业 api is ready调用
      postOffice.receiveMessage()
      postOffice.sendMessage(postOffice.ipadCommunication.bridgeReady)
      return postOffice
    } else {
      let postOffice = new pcPostOffice()
      postOffice.receiveMessageCallback = receiveMessageCallback
      postOffice.receiveMessage()
      return postOffice
    }
  }
  this.receiveMessageCallback = function (data) {}
  this.sendMessage = function (type, msg) {
    throw new Error("消息发不出去")
  }
  this.receiveMessage = function () {
    throw new Error("消息接收不到")
  }
  this.ipadCommunication = {
    pageBack: 'vkappbridge://history/back', // 页面返回按钮
    loadingStop: 'vkappbridge://loading/stop', // ipad loading图关闭
    bridgeReady: 'vkappbridge://__bridge_ready__', // 桥准备好通知
    webViewClose: 'vkappbridge://miniHomework/closeView?type=miniHomework', // 关闭minihomework webview
    didSubmitResult: 'vkappbridge://miniHomework/didSubmitResult',
    setInterViewFrame: 'vkappbridge://miniHomework/setInterViewFrame', // 设置minihomwwork webview 大小
    postMessage: 'vkappbridge://miniHomework/postMessage',
    setFullScreen: 'vkappbridge://miniHomework/setFullScreen'
  }
}

let ipadPostOffice = function () { }
ipadPostOffice.prototype = new messagePostOffice()
ipadPostOffice.prototype.sendMessage = function (type, msg) {
  if (msg) {
    type += ('?msg=' + msg)
  }
  var iFrame
  iFrame = document.createElement("iframe")
  iFrame.setAttribute("src", type)
  iFrame.setAttribute("style", "display:none;")
  document.body.appendChild(iFrame)
  //把它从dom上移除掉
  iFrame.parentNode.removeChild(iFrame)
  iFrame = null
}
ipadPostOffice.prototype.receiveMessage = function () {
  window['VKAppBridge'] = {}
  window.VKAppBridge['receiveFromNative'] = (data => {
    try {
      var jsonObject = JSON.parse(data)
      if (jsonObject.module == 'miniHomeworkJs' && jsonObject.method == 'postMessage') {
        var e = jsonObject.data
        this.receiveMessageCallback(JSON.parse(e.msg))
      }
    } catch (error) {
      throw new Error("ipad消息接收不到-异常了")
    }
  })
}

let pcPostOffice = function () { }
pcPostOffice.prototype = new messagePostOffice()
pcPostOffice.prototype.sendMessage = function (type, msg) {
  try {
    if(msg){
      document.getElementById('js-iframe').contentWindow.postMessage(msg, "*")
      document.getElementById('js-iframe-standard').contentWindow.postMessage(msg, "*")
    }
  } catch (error) {
    //eslint-disable-next-line no-console
    console.log("iframe发送消息报异常了")
  }
}
pcPostOffice.prototype.receiveMessage = function () {
  let self = this
  window.removeEventListener('message', cb)
  cb = function(e) {
    self.receiveMessageCallback(e.data)
  }
  window.addEventListener('message', cb)
}
export {
  messagePostOffice
}
