/**
 * Created by lihongbin on 2018/7/27.
 */
import axios from "axios"
import cookies from "cookies-js"
import dialogTrial from "../../common/vk_dialog_trial.vue"
import dragonUtils from "../../../utils/_dragon"
import {CURRENT_COURSE_STATUS} from "./courseEnum"
import {Base64} from "js-base64"
import channelUtils from "../course/classroomChannel.js"

const _URL = {
  learningUrl: '//' + window.location.host.replace(/lc/, 'learning'),
  homeworkUrl: '//' + window.location.host.replace(/lc/, 'nhw'),
  wwwUrl: '//' + window.location.host.replace(/lc/, 'www'),
  channelUrl: '',
  tempWindow: null,
  // 接入护城河
  goToChannel() {
    if (dragonUtils.isOnDragonClient()) {
      sa.track('learning_click', {
        'click_id': 'pc_learning_pcapp_wop_enter_classroom',
        'service_url': this.channelUrl
      })
      window.location.href = this.channelUrl
    } else {
      sa.track('learning_click', {
        'click_id': 'pc_learning_wop_enter_classroom',
        'service_url': this.channelUrl
      })
      if (this.tempWindow) {
        this.tempWindow.location.href = this.channelUrl
        this.tempWindow = null
      } else {
        window.open(this.channelUrl)
      }
    }
  },
  goToPublicClass: function (onlineClassId) {
    window.open(`${this.wwwUrl}/openclass/student/onlineclass?onlineClassId=${onlineClassId}`)
  },
  goToMajorReplay: function (onlineClassId) {
    window.open(`${this.learningUrl}/replay/major?onlineClassId=${onlineClassId}`)
  },
  goToPublicReplay: function (onlineClassId) {
    window.open(`${this.wwwUrl}/openclass/student/playback?onlineClassId=${onlineClassId}`)
  },
  goToReport: function (onlineClassId) {
    Vm.$router.push("/test_result/0/" + onlineClassId)
  },
  goToCourseWare: function (onlineClassId, lessonNumber, lessonId) {
    Vm.$router.push(`/courseware/${onlineClassId}/${lessonNumber}/${lessonId}`)
  },
  goToPDF: function (pdfUrl) {
    Vm.$router.push(`/pdf_view/${pdfUrl}`)
  },
  goToRecordVideo: function (onlineClassId) {
    window.open(`${this.wwwUrl}/icvideo/?onlineClassId=${onlineClassId}`)
  },
  goToESLRecordVideo: function (onlineClassId) {
    window.open(`${this.wwwUrl}/icesl/?onlineClassId=${onlineClassId}`)
  },
  goToTaskCardUrl: function (buttonExtra) {
    if(buttonExtra.isLc){
      Vm.$router.push({path:buttonExtra.url})
    }else{
      window.open(buttonExtra.url)
    }
  },
  exceedOrderApi: "/rest/learninggw/api/pc/homepage/classroom/checkExcessClassAndAllotTeacher",
  trailResultApi: "/rest/learninggw/api/pc/homepage/getStudentTrailResult",
  studentExtraRouteApi: "/rest/learninggw/api/pc/material/extra/getStudentExtraRoute"
}
const _Function = {

  //Trial课超约判断  onlineClass 为 OnlineClass 对象
  checkTrial: function ({courseId, bookType, onlineClassId}) {
    //判断Trial课
    return new Promise((resolve, reject) => {
      if (courseId == 597767) {
        //判断bookType  0代表非超约课  2代表超约课已经匹配了老师 其他则需要调用超约接口
        if (bookType != 0 && bookType != 2) {
          axios.get(_URL.exceedOrderApi, {
            params: {
              studentId: cookies.get("studentId"),
              onlineClassId: onlineClassId
            }
          }).then((res) => {
            if (res.data.code == 200) {
              this.trailToast(resolve)
            } else {
              //弹出toast
              Vm.$showToast('啊哦，教室创建失败，<br>建议联系约课老师重新安排哦')
            }
          }).catch((err) => {
            Vm.$showToast('啊哦，教室创建失败，<br>建议联系约课老师重新安排哦')
          })
        } else {
          this.trailToast(resolve)
        }
      } else {
        resolve()
      }
    })
  },

  //trial课前条款
  trailToast: function (callBackFun) {
    Vm.$modelShow({
      model: dialogTrial,
      title: "为了确保试听效果，请您阅读如下注意事项并进行检查确认",
      buttonText: "知道了",
      enter: () => {
        Vm.$modelClose()
        callBackFun()
      },
      closeDialog: () => {
        Vm.$modelClose()
      }
    })
  },

  //PC App 进教室
  pcAppEnterClassroom: function (onlineClassId, classType) {
    return new Promise((reslove, reject) => {
      if (dragonUtils.isOnDragonClient()) {
        let dragonClientUA = navigator.userAgent.match(/vipkid\/\d+(\.\d+)*/i)
        //灰度
        axios.get('/rest/vanguard/api/service/client/classroom/getRoomUrl', {
          params: {
            onlineClassId: onlineClassId,
            studentId: cookies.get("studentId"),
            version: dragonClientUA ? dragonClientUA[0].split('/')[1] : '0'
          }
        }).then((res) => {
          try {
            if (res.data.data.roomType == 'NA') {
              sa.track('learning_click', {
                'click_id': 'pc_learning_pcapp_enter_classroom_native'
              })
              window.__bridge.openClass(onlineClassId, res.data.data.supplierCode)
            } else {
              reslove()
            }
          } catch (e) {
            sa.track('learning_click', {
              'click_id': 'pc_learning_classroom_get_url',
              'error_msg': JSON.stringify(e)
            })
            reslove()
          }
        }).catch((err) => {
          sa.track('learning_click', {
            'click_id': 'pc_learning_classroom_get_url',
            'error_msg': JSON.stringify(err.response.data)
          })
          reslove()
        })
      } else {
        reslove()
      }
    })
  }
}
//统一课程资源外接
export default {
  //1对多教室
  oneToMore(onlineClassId) {
    _Function.pcAppEnterClassroom(onlineClassId).then(() => {
      _URL.goToPublicClass(onlineClassId)
    })
  },

  //1对1教室
  async oneToOne({cardType, onlineClassId, courseId, bookType}) {
    // 请求之后打开窗口会被拦截，提前打开
    if (!dragonUtils.isOnDragonClient() && courseId != 597767) {
      _URL.tempWindow = window.open('_blank')
    }
    // 一对一进入教室接入护城河
    _URL.channelUrl = await channelUtils.getChannel(onlineClassId)
    _Function.checkTrial({
      courseId,
      bookType,
      onlineClassId
    }).then(()=>{
      _URL.goToChannel()
    })
    // 代码最终通过courseId判断是不是体验课，如果先判断cardType == 104会造成路径那边体验课进教室不走超约判断，为了防止后期变动暂未删除 2018.11.12 by xudong
    // if(cardType && cardType == 104) {
    //   _Function.checkTrial({
    //     courseId,
    //     bookType,
    //     onlineClassId
    //   }).then(()=>{
    //     _URL.goToChannel()
    //   })
    // }else {
    //   _URL.goToChannel()
    // }
  },

  //主修课程回放
  majorReplay(onlineClassId) {
    //主修课
    _URL.goToMajorReplay(onlineClassId)
  },

  //公开课程回放
  publicReplay(onlineClassId) {
    _URL.goToPublicReplay(onlineClassId)
  },

  courseAfterOrBefore({onlineClassId, lessonId, courseId, type, curriculumVersion}) {
    axios.get(_URL.studentExtraRouteApi, {
      params: {
        studentId: cookies.get("studentId"),
        onlineClassId: onlineClassId,
        lessonId: lessonId,
        courseId: courseId,
        curriculumVersion: curriculumVersion ? curriculumVersion : 1,
        source: dragonUtils.isOnDragonClient() ? 2 : 1, //1PC 2PCAPP
        // type: type == 'PRE' ? 1 : 2
        type: type == 'PRE' ? 1 : (type == 'AFTER_EXTRA' ? 3 : 2)

      }
    }).then((res) => {
      let data = res.data.data
      if (data.isLc) {
        Vm.$router.push({path: data.url})
      } else {
        window.location.href = data.url + "&back_url=" + encodeURIComponent(document.location.href)//@back_url 用于作业端返回
      }
    })
  },

  //打开资料
  pdfView(buttonExtra){
    if (buttonExtra && buttonExtra.pdf) {
      _URL.goToPDF(Base64.encode(buttonExtra.pdf))
    } else {
      Vm.$showToast("现在还没有资料，请联系班主任处理")
    }
  },

  classroomRecord(onlineClassId){
    _URL.goToRecordVideo(onlineClassId)
  },
  taskCard({type,buttonExtra}){
    if(type == CURRENT_COURSE_STATUS.openUrl){
      _URL.goToTaskCardUrl(buttonExtra)
    }
  },
  // 课程按钮点击
  // pre: "PRE",//课前预习按钮
  // after: "AFTER",//课后作业按钮
  // courseWare: "COURSEWARE",//查看课件
  // majorClassRoom: "MAJOR_CLASSROOM",//进入一对一教室
  // majorClassRoomFinish: "MAJOR_CLASSROOM_FINISH",//进入已下课的一对一教室
  // publicClassRoom: "PUBLIC_CLASSROOM",//进入公开课教室
  // publicClassRoomFinish: "PUBLIC_CLASSROOM_FINISH",//进入已下课的公开课教室
  // majorReplay: "MAJOR_REPLAY",//进入一对一回放
  // readBook: "READ_BOOK",//读绘本
  // publicReplay: "PUBLIC_REPLAY"//进入公开课回放
  courseButtonClick({cardType, type, onlineClassId, lessonNum, lessonId, clickId, courseId, curriculumVersion, buttonExtra, bookType, buttonStatus}) {
    sa.track('learning_click', {
      'click_id': clickId,
      'online_class_id': onlineClassId,
      'lesson_id': lessonId,
      'class_id': courseId //由于神策新增字段申请流程繁琐，先用class_id代表courseId
    })
    switch (type) {
    case CURRENT_COURSE_STATUS.pre://课前
    case CURRENT_COURSE_STATUS.after://课后
    case CURRENT_COURSE_STATUS.afterExtra://绘画
      this.courseAfterOrBefore({onlineClassId, lessonId, courseId, type, curriculumVersion})
      break
    case CURRENT_COURSE_STATUS.courseWare://看课件
      _URL.goToCourseWare(onlineClassId, lessonNum, lessonId)
      break
    case CURRENT_COURSE_STATUS.publicClassRoom:
    case CURRENT_COURSE_STATUS.publicClassRoomFinish:
      this.oneToMore(onlineClassId)
      break
    case CURRENT_COURSE_STATUS.majorClassRoom:
    case CURRENT_COURSE_STATUS.majorClassRoomFinish:
      this.oneToOne({cardType, onlineClassId, courseId, bookType})
      break
    case CURRENT_COURSE_STATUS.majorReplay:
      this.majorReplay(onlineClassId)
      break
    case CURRENT_COURSE_STATUS.publicReplay:
      this.publicReplay(onlineClassId)
      break
    case CURRENT_COURSE_STATUS.pdf:
      this.pdfView(buttonExtra)
      break
    case CURRENT_COURSE_STATUS.eslClassroomRecord:
      _URL.goToESLRecordVideo(onlineClassId)
      break
    case CURRENT_COURSE_STATUS.publicClassRecord:
      this.classroomRecord(onlineClassId)
      break
    case CURRENT_COURSE_STATUS.trialReport:
      if(buttonStatus == "HIGH"){
        _URL.goToReport(onlineClassId)
      }
      break
    case CURRENT_COURSE_STATUS.getPointReward:
    case CURRENT_COURSE_STATUS.getReward:
    case CURRENT_COURSE_STATUS.openUrl:
    case CURRENT_COURSE_STATUS.signUpTask:
      this.taskCard({type, buttonExtra})
      break
    }
    Vm.$playSound("click")
  }
}

