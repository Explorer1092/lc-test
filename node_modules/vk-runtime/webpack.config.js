const merge = require('webpack-merge')
const path = require('path')
const webpack = require('webpack')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')
var common = {
  entry: {
    main: "./src/main.js"
    // vendor: [
    //   'vue',
    //   'vue-router',
    //   'cookies-js',
    //   'axios',
    //   'form-urlencoded',
    //   './src/lib/session.js',
    //   './src/lib/log.config.js',
    //   './src/lib/polyfill.min.js',
    //   './src/lib/sensorsdata.min.js'
    // ]
  },
  module: {
    loaders: [{
      test: /\.vue$/,
      loader: 'vue-loader',
      options: {
        extractCSS: false,
        esModule: false
      }
    }, {
      test: /\.js$/,
      loader: 'babel-loader',
      include: [
        path.resolve(__dirname, "src"),
        path.resolve(__dirname, 'node_modules/vvos-js')
      ]
    }, {
      test: /\.css$/,
      loader: 'css-loader', 
      options: {
        minimize: true
      }
    }, {
      test: /\.(png|jpg|gif|svg)$/,   
      loader: 'url-loader?name=[path][name]-[hash].[ext]&limit=10000'
    }, {
      test: /\.(wav|mp3)$/,
      options:{
        limit: 819200
      },
      loader: 'url-loader'
    }, {
      test: /\.html$/,
      loader: 'html-loader'
    }]
  },
  resolve: {
    alias: {
      'axios': path.join(__dirname + '/src/utils/_vkaxios.js'),
      'oaxios': path.join(__dirname + '/node_modules/axios/index.js'),
      'src': path.join(__dirname, '/src')
    }
  },
  plugins: [
    //去除重复的css
    new OptimizeCSSPlugin({
      cssProcessorOptions: {
        safe: true
      }
    }),
    new HtmlWebpackPlugin({
      template: './src/index.html',
      filename: 'index.html',
      favicon: path.resolve('./src/img/favicon.png')
    }),
    /**
     使用HashedModuleIdsPlugin 保证对库代码进行散列的时候，
     如果库代码没有进行更新，库代码不变，保证hash值不变
     */
    new webpack.HashedModuleIdsPlugin(),

    /**
     * 使用[hash]会使用相同的哈希散列值，不会针对每一个chunk进行哈希散列。无法对vendor进行有效的长期缓存
     * 对output使用chunkhash进行哈希值计算，加上runtime manifest的单独提取，能够保证 vendor库没有更新的情况下，vendor的hash不变
     * 而减少一次请求，从缓存中读取，最多就是浏览器刷新的情况下多一个304请求。
     * */
    // new webpack.optimize.CommonsChunkPlugin({
    //   name: 'vendor'
    // }),

    //将各个模块的runtime和mainifest单独提取出来，依赖联系直接的js单独提取出来
    // new webpack.optimize.CommonsChunkPlugin({
    //   name: 'manifest',
    //   chunks: ['vendor']
    // })
  ]
}
module.exports = function (env) {
  var envconfig = require(`./webpack.${env}.js`)
  return merge(common, envconfig)
}
