var flatbuffers = require('./flatbuffers').flatbuffers
var fbutil = require('./v1.1_generated').fbutil

var fbsutil = {
  parseJSON: function(appId, obj) {
    var options = { method: 'init', type: 'json', data: obj }

    var builder = createBuilder(appId, options)

    return builder.asUint8Array()
  },

  parseBinary: function(appId, buffer) {
    binary = new Uint8Array(buffer)

    var options = { method: 'stream', type: 'binary', data: binary }

    var builder = createBuilder(appId, options)

    return builder.asUint8Array()
  },

  parseResBody: function(data, cb) {
    blob2arraybuffer(data, function(buf) {
      var resp = fbutil.TcpPackage.getRootAsTcpPackage(buf)

      var buffer = new Uint8Array(resp.bodyArray())
      buffer = new flatbuffers.ByteBuffer(buffer)

      var body = fbutil.TcpRespBody.getRootAsTcpRespBody(buffer)


      var code = body.code()
      var data = body.data()
      var message = body.message()

      cb({code: code, data: data, message: message})
    })
  }
}

// 创建builder，每次ws.send都需要创建一个新的builder
function createBuilder(appId, options) {
  var builder = new flatbuffers.Builder(1)
  var byteArray

  if(options.type === 'json') {
    byteArray = new Uint8Array(str2ab(JSON.stringify(options.data)))
  } else {
    byteArray = options.data
  }

  var reqHeader = createReqHeader(builder, {
    appId: appId,
    method: options.method,
    type: options.type,
    contentLength: byteArray.length
  })
  var reqBody = fbutil.TcpPackage.createBodyVector(builder, byteArray)

  var request = createPackage(builder, reqHeader, reqBody)
  builder.finish(request)

  return builder
}

// 创建package
function createPackage(builder, header, body) {
  fbutil.TcpPackage.startTcpPackage(builder)
  fbutil.TcpPackage.addHeader(builder, header)
  fbutil.TcpPackage.addBody(builder, body)
  var tcpPackage = fbutil.TcpPackage.endTcpPackage(builder)

  return tcpPackage
}

// 创建request header
function createReqHeader(builder, options) {
  var partList = []

  var params = {
    appId: options.appId,
    method: options.method,
    type: options.type,
    verifyCode: 'verify-code',
    magicNumber: 'magic-number',
    contentLength: options.contentLength,
    version: 'v1.9.0'
  }

  var keys = Object.keys(params)
  for(var i=0; i<keys.length; i++) {
    var key = keys[i]
    var val = params[key]

    partList.push(createHeaderPart(builder, key, val))
  }

  header = fbutil.TcpPackage.createHeaderVector(builder, partList)

  return header
}

function createHeaderPart(builder, key, val) {
  // console.log('create header part: ', key, val)
  var key = builder.createString(key)
  var val = builder.createString(val)

  fbutil.TcpHeader.startTcpHeader(builder)
  fbutil.TcpHeader.addKey(builder, key)
  fbutil.TcpHeader.addValue(builder, val)

  var part = fbutil.TcpHeader.endTcpHeader(builder)

  return part
}

function blob2arraybuffer(blob, cb) {
  var reader = new FileReader();
  reader.readAsArrayBuffer(blob);
  reader.onload = function (e) {
    var buf = new flatbuffers.ByteBuffer(new Uint8Array(reader.result));
    cb(buf)
  }
}

function ab2str(buf) {
  return String.fromCharCode.apply(null, new Uint8Array(buf))
}

function str2ab(str) {
  var buf = new ArrayBuffer(str.length)
  var bufView = new Uint8Array(buf)
  for (var i = 0, strLen = str.length; i < strLen; i++) {
    bufView[i] = str.charCodeAt(i)
  }
  return buf
}

this.fbsutil = fbsutil;
