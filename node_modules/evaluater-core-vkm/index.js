/*
 * 评测核心组件
 */
var fbsutil = require("./fbsutil").fbsutil;
var states = require("./states");

function VKEvaluaterCore(options) {
  var env = options.env;
  apiUrlMap = {
    test: "wss://a66-ecp.vipkid-qa.com.cn/iscp/api/chivox/v2",
    pre: "wss://pre-ecp.vipkid.com.cn/iscp/api/chivox/v2",
    prod: "wss://wss.vipkid.com.cn/iscp/api/chivox/v2"
  };

  var that = this;
  var appId = options.appId;
  var onState = options.onState;
  var onError = options.onError;
  // var protocol = location.protocol === 'https:' ? 'wss:' : 'ws:'
  var socketUrl = apiUrlMap[env || "prod"] + "?appid=" + appId;
  var websocket;
  var lastConnectTime;
  var reconnectTry = 0;
  // 获取结果超时判断参数，默认为5s
  var defaultReceiveTimeout = 5000;
  var receiveTimeout = defaultReceiveTimeout;
  var receiveTimeoutObj = null;

  // 对外提供的方法
  this.sendAudioInfo = sendAudioInfo;
  this.sendAudioStream = sendAudioStream;
  this.updateState = _updateAndEmitState;
  this.stop = stop;
  // this.cancel = cancel
  this.close = close;
  this.state = states.NOT_READY;

  //变量检测
  _checkVariable();

  // 环境监测
  if (!window.WebSocket) {
    _throwError("notSupport");
    _updateState(states.NOT_READY);
    return;
  }

  _updateAndEmitState(states.CONNECTING);
  socketInit();

  // 初始化WebSocket
  function socketInit() {
    websocket = new WebSocket(socketUrl);
    websocket.onopen = handleSocketOpen;
    websocket.onmessage = handleSocketMessage;
    websocket.onclose = handleSocketClose;
  }

  // 发送测评文本信息
  function sendAudioInfo(audioInfo) {
    if (!_checkCondition("sendAudioInfo")) return;

    // TODO 检查参数及信息格式是否符合要求

    // 提取获取结果超时判断的参数
    if (typeof audioInfo.receiveTimeout === "number") {
      receiveTimeout = audioInfo.receiveTimeout;
    } else {
      receiveTimeout = defaultReceiveTimeout;
    }

    // 拼接接口需要的参数对象
    var params = {
      appId: appId,
      refText: audioInfo.refText,
      textMode: audioInfo.textMode || 0,
      evalMode: audioInfo.evalMode || 0,
      rank: audioInfo.rank || 100
    };
    // 句子或段落
    if (params.textMode !== 0) {
      params.refTextObj = audioInfo.refTextObj;
    }
    // hitalk
    if (params.evalMode === 3) {
      params.keyWords = audioInfo.keyWords;
    }

    // 发送本文信息
    socketSend(params);
    _updateAndEmitState(states.WAITING_AUDIO_STREAM);
  }

  // 发送音频流
  function sendAudioStream(stream) {
    if (!_checkCondition("sendAudioStream")) return;

    socketSend(stream);
  }

  // 停止音频流，意味着要准备获取评测结果
  function stop() {
    if (!_checkCondition("stop")) return;

    // 是否需要设置超时判断
    receiveTimeoutObj = setTimeout(() => {
      if (that.state !== states.RESULT_RECEIVING) {
        _log("receive timeout triggered, but state not match!");
      } else {
        _updateAndEmitState(states.PREPARE_START);
        _throwError("evaluateTimeout", {
          message: "timeout is " + receiveTimeout + "ms"
        });
      }
    }, receiveTimeout);

    socketSend(new ArrayBuffer(0));
    _updateAndEmitState(states.RESULT_RECEIVING);
  }

  // 取消评测
  // function cancel() {
  //   if(that.state === states.PREPARE_START) return
  //
  //   socketSend(new ArrayBuffer(0))
  //   _updateState(states.CANCELING)
  // }

  function close() {
    if (that.state === states.CLOSED) return;

    websocket.close();
    websocket = null;
    _updateAndEmitState(states.CLOSED);
  }

  function _reconnect() {
    reconnectTry += 1;

    var currTime = new Date().getTime();

    if (reconnectTry < 3 || currTime - lastConnectTime > 3000) {
      _log("try _reconnect...");
      lastConnectTime = new Date().getTime();

      socketInit();
    } else {
      _throwError("cannotConnect");

      _updateAndEmitState(states.CLOSED);
      _log("disconnected permanently");
    }
  }

  function _checkCondition(stage) {
    // _log('stage: ', stage, ', status: ', status)
    // 首先，检测init状态
    if (that.state === states.CONNECTING) {
      throw new Error(
        "[VKEvaluaterCore] The server still in connecting. Please use it before init finished.(by check state)"
      );
    }
    // if(that.state === states.CANCELING) {
    //   throw new Error('[VKEvaluaterCore] In canceling, please waiting for cancel finished.')
    // }
    if (that.state === states.CLOSED) {
      throw new Error(
        "[VKEvaluaterCore] The server already closed. Please re-init it before use it agiain."
      );
    }

    // 其次，检测评测步骤执行是否合理
    if (stage === "sendAudioInfo" && that.state !== states.PREPARE_START) {
      throw new Error(
        "[VKEvaluaterCore] The previous evaluter task sill in process. You must waiting for it finished."
      );
    }
    if (
      stage === "sendAudioStream" &&
      that.state !== states.WAITING_AUDIO_STREAM
    ) {
      throw new Error(
        "[VKEvaluaterCore] Please send audio info before send audio data."
      );
    }
    if (stage === "stop" && that.state !== states.WAITING_AUDIO_STREAM) {
      console.warn(
        "[VKEvaluaterCore] Please send info and audio stream before get result.(forget to call sendAudioInfo()?)"
      );
      return false;
    }

    return true;
  }

  //变量检测
  function _checkVariable() {
    if (!appId) {
      _throwError("authFial");
    }
  }

  // 更新状态
  function _updateState(newState) {
    that.state = newState;
  }

  // 更新状态，并通知客户端
  function _updateAndEmitState(newState, message, data) {
    _updateState(newState);

    onState({ code: newState, message: message, data: data });
  }

  // 将错误抛给客户端
  function _throwError(type, options) {
    var message = options && options.message;

    var map = {
      notSupport: { code: 1101, message: "not supported" },
      cannotConnect: { code: 1104, message: "server cannot connect" },
      connectTimeout: { code: 1105, message: "connect timeout" },
      authFial: { code: 1107, message: "appId invalid" },

      // 评测相关
      audioInfoInvalid: {
        code: 4001,
        message: message || "audio info invalid"
      },
      evaluateFail: { code: 4002, message: message || "evaluate failed" },
      evaluateTimeout: { code: 4003, message: message || "evaluate timeout" },

      /* 其他异常错误 */
      unknown: { code: 1000, message: "unexpected error" }
    };

    var err = map[type] || map.unknown;
    onError(err);
  }

  function handleSocketOpen() {
    reconnectTry = 0;
    _updateAndEmitState(states.PREPARE_START);
  }

  function handleSocketMessage(evt) {
    fbsutil.parseResBody(evt.data, function(data) {
      if (data.data) data.data = JSON.parse(data.data);
      _log("message back", data);

      // TODO 增加更详细的错误判断
      switch (data.code) {
        case "10000":
          // 转发成功的response
          if (!data.data || Object.keys(data.data).length === 0) return;
          if (that.state !== states.RESULT_RECEIVING) {
            _log("result received, but state not match");
            return;
          }

          // 取消超时检查
          if (receiveTimeoutObj) clearTimeout(receiveTimeoutObj);
          // 更新状态
          _updateAndEmitState(states.RESULT_RECEIVED, null, data.data);
          // 改为外部更新core状态，否则将引发上传异步问题
          //_updateAndEmitState(states.PREPARE_START);

          break;
        case "20001":
        case "20002":
          _throwError("audioInfoInvalid", { message: data.message });
          _updateAndEmitState(states.PREPARE_START);
          break;
        case "20003":
        case "20004":
        case "20005":
        case "20006":
        case "20007":
        case "20008":
        case "20009":
        case "20010":
        case "99999":
          _throwError("evaluateFail", { message: data.message });
          _updateAndEmitState(states.PREPARE_START);
          break;
      }
    });
  }

  function handleSocketClose(evt) {
    _log("websocket closed:", evt);

    // 服务器端正常关闭socket
    // 可能的原因：第三方和服务器断开
    if (evt.code === 1005) {
      _log("服务器端正常关闭socket");
    }

    // 服务器端socket异常断开
    // 可能的原因：404|服务器出现异常|服务器挂掉
    if (evt.code === 1006) {
      _log("服务器端socket异常断开");

      if (that.state === states.INITING) {
      }

      // TODO 上报这个异常
    }

    if (that.state === states.CLOSED) return;

    _updateAndEmitState(states.CONNECTING);
    _reconnect();
  }

  function socketSend(info) {
    _log("websocket send:", info);
    // 格式化info
    if (info instanceof ArrayBuffer) {
      info = fbsutil.parseBinary(appId, info);
    } else if (typeof info === "object") {
      info = fbsutil.parseJSON(appId, info);
    } else {
      throw new Error("待发送参数不合法");
    }

    websocket.send(info);
  }

  function _log() {
    if (
      !(window._vkm_debug === true || window._vkm_evaluate_core_debug === true)
    )
      return;

    var args = Array.prototype.slice.call(arguments);
    // args.unshift(new Date().toLocaleString())
    args.unshift("EvaluaterCore:");
    console.debug.apply(console, args);
  }
}

module.exports = VKEvaluaterCore;
