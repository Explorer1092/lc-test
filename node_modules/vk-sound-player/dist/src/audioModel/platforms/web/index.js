"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AudioCore_1 = require("../../core/AudioCore");
class AudioModelPc extends AudioCore_1.AudioCore {
    constructor(options) {
        super(options);
        this.initAudioPcProgress();
        this.initAudioPcVolume();
    }
    initAudioPcVolume() {
        if (!this.volumeData.showVolume || !this.volumeData.parent) {
            return;
        }
        const { wrapper } = this.volumeData.refs;
        let self = this;
        // 音量条添加相应的事件
        wrapper.addEventListener('mousedown', self.volumeMouseDown.bind(self));
        wrapper.addEventListener('mousemove', self.volumeMouseMove.bind(self));
        wrapper.addEventListener('mouseup', self.volumeMouseUp.bind(self));
        wrapper.addEventListener('mouseleave', self.volumeMouseUp.bind(self));
    }
    volumeMouseDown(event) {
        const { current, wrapper } = this.volumeData.refs;
        this.volumeTouch = {
            initiated: true,
            startX: this.volumeData.direction === 'vertical'
                ? this.getPosition(wrapper).top
                : this.getPosition(wrapper).left,
            left: current.clientWidth
        };
    }
    volumeMouseMove(event) {
        let { wrapper, current, indicator } = this.volumeData.refs;
        if (!this.volumeTouch.initiated) {
            return;
        }
        let offset = 0;
        // console.log(this.volumeData.direction === 'vertical')
        if (this.volumeData.direction === 'vertical') {
            offset = Math.min(wrapper.clientHeight, Math.max(0, event.offsetY));
            current.style.height = offset + 'px';
            // 同步audio的音量
            this.volumeCache = this.audio.volume =
                current.clientHeight / wrapper.clientHeight;
        }
        else {
            offset = Math.min(wrapper.clientWidth, Math.max(0, event.clientX - this.volumeTouch.startX));
            // 更新音频的播放时间
            current.style.width = offset + 'px';
            // 同步audio的音量
            this.volumeCache = this.audio.volume =
                current.clientWidth / wrapper.clientWidth;
        }
    }
    volumeMouseUp() {
        let { wrapper, current } = this.volumeData.refs;
        this.volumeTouch.initiated = false;
    }
    // 初始化pc端播放单元
    initAudioPcProgress() {
        if (!(!this.audio.progressReady &&
            this.progressData.showProgress &&
            this.progressData.parent)) {
            return;
        }
        const { wrapper, indicator } = this.progressData.refs;
        let self = this;
        // 进度条添加相应的事件
        wrapper.addEventListener('mousedown', self.progressMouseDown.bind(self));
        wrapper.addEventListener('mousemove', self.progressMouseMove.bind(self));
        wrapper.addEventListener('mouseup', self.progressMouseUp.bind(self));
        wrapper.addEventListener('mouseleave', self.progressMouseUp.bind(self));
    }
    progressMouseDown(event) {
        const { current, wrapper } = this.progressData.refs;
        this.touchData = {
            initiated: true,
            startX: this.getPosition(wrapper).left,
            left: current.clientWidth
        };
        this.togglePlay(false);
    }
    progressMouseMove(event) {
        let { wrapper, current, indicator } = this.progressData.refs;
        if (!this.touchData.initiated) {
            return;
        }
        let offsetWidth = Math.min(wrapper.clientWidth, Math.max(0, event.clientX - this.touchData.startX));
        // 更新音频的播放时间
        current.style.width = offsetWidth + 'px';
    }
    progressMouseUp() {
        let { wrapper, current } = this.progressData.refs;
        if (this.touchData.initiated) {
            this.touchData.initiated = false;
            this.audio.currentTime =
                this.audio.duration * (current.clientWidth / wrapper.clientWidth);
            if (this.audio.paused) {
                this.togglePlay(true);
            }
        }
    }
    refreshInstance() {
        this.refresh();
        this.initAudioPcProgress();
    }
}
exports.AudioModelPc = AudioModelPc;
// ts里面super具体的作用
//# sourceMappingURL=index.js.map