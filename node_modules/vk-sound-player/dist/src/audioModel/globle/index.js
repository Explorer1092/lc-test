"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AudioCore_1 = require("../core/AudioCore");
class AudioModelPc extends AudioCore_1.AudioCore {
    constructor(options) {
        super(options);
        this.initAudioPc();
    }
    // 初始化pc端播放单元
    initAudioPc() {
        const { wrapper } = this.progressData.refs;
        let self = this;
        // 进度条添加相应的事件
        wrapper.addEventListener('mousedown', self.progressMouseDown.bind(this));
        wrapper.addEventListener('mousemove', self.progressMouseMove.bind(this));
        wrapper.addEventListener('mouseup', self.progressMouseUp.bind(this));
    }
    progressMouseDown(event) {
        const { current } = this.progressData.refs;
        this.touchData = {
            initiated: true,
            startX: event.pageX,
            left: current.clientWidth
        };
    }
    progressMouseMove(event) {
        let { wrapper, current } = this.progressData.refs;
        if (!this.touchData.initiated) {
            return;
        }
        let offsetWidth = Math.min(wrapper.clientWidth, Math.max(0, event.offsetX));
        // 更新音频的播放时间
        current.style.width = offsetWidth + 'px';
    }
    progressMouseUp() {
        let { wrapper, current } = this.progressData.refs;
        this.touchData.initiated = false;
        this.audio.currentTime =
            this.audio.duration * (current.clientWidth / wrapper.clientWidth);
        if (this.audio.paused) {
            this.togglePlay(true);
        }
    }
}
exports.AudioModelPc = AudioModelPc;
// ts里面super具体的作用
//# sourceMappingURL=index.js.map