/**
 *  @file: qiniu.entry.es is a <es> file
 *  @date: File created 2017-09-30 12:39
 *  @author:  shangwenhe
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _asyncMin = require('async/dist/async.min.js');

var _asyncMin2 = _interopRequireDefault(_asyncMin);

var _encUtf = require('crypto-js/enc-utf8');

var _encUtf2 = _interopRequireDefault(_encUtf);

var _encBase = require('crypto-js/enc-base64');

var _encBase2 = _interopRequireDefault(_encBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var qiniu = function () {
  function qiniu(_ref) {
    var bucket = _ref.bucket,
        key = _ref.key,
        token = _ref.token;

    _classCallCheck(this, qiniu);

    // this.client = new KODO();
    this.options = {
      bucket: bucket,
      token: token,
      domain: 'up.qiniup.com'
    };
    this.blockSize = 4 * 1024 * 1024;
    return this;
  }

  /**
    * 文件直传
    * */


  _createClass(qiniu, [{
    key: 'directUpFile',
    value: function directUpFile(file, callback) {
      var instance = _axios2.default.create({
        headers: { 'Authorization': this.options.token }
      });
      var paramsData = new FormData();
      paramsData.append('key', file.key);
      paramsData.append('token', this.options.token);
      paramsData.append('file', file);
      instance.post(file.host, paramsData).then(function (result) {
        callback(null, Object.assign({}, result.data, { name: result.data.key }));
      }).catch(function (err) {
        callback(null, null);
      });
    }

    /**
      * 文件分片上传
      * */

  }, {
    key: 'sliceUpFile',
    value: function sliceUpFile(file, callback, process) {
      var _this = this;

      var blockCount = Math.ceil(file.size / this.blockSize);
      var chunks = [];

      for (var i = 0; i < blockCount; ++i) {
        var start = i * this.blockSize;
        var end = Math.min(file.size, start + this.blockSize);
        var size = end - start;
        chunks.push({ index: i, file: file.slice(start, end), size: size, key: file.key, token: this.options.token });
      }
      var chunkResult = [];
      _asyncMin2.default.mapLimit(chunks, 1, function (chunk, callback) {
        var instance = _axios2.default.create({
          headers: {
            'Accept': '*/*',
            'Authorization': 'UpToken ' + chunk.token,
            'Content-Type': 'application/octet-stream'
          }
        });
        var host = [file.host, 'mkblk', chunk.size].join('/');

        host = host + '?' + ['name=' + chunk.key, 'chunk=' + chunk.index, 'chunks=' + chunks.length].join('&');
        instance.post(host, chunk.file).then(function (result) {
          result.data && result.data.ctx && chunkResult.push(result.data.ctx);
          typeof process == 'function' && process(null, { file: file, process: (chunk.index + 1) / chunks.length });

          callback(null, result.data && result.data.ctx);
        }).catch(function (err) {
          callback(null, err);
        });
      }, function (err, data) {
        var instance = _axios2.default.create({
          headers: {
            'Authorization': 'UpToken ' + _this.options.token,
            'Content-Type': 'text/plain'
          }
        });
        var key = _encBase2.default.stringify(_encUtf2.default.parse(file.key));
        var host = [file.host, 'mkfile', file.size, 'key', key, 'fname', key].join('/');
        instance.post(host, chunkResult.join(',')).then(function (result) {
          callback(null, Object.assign({}, result.data, { name: result.data.key }));
        }).catch(function (err) {
          callback(null, err);
        });
      });
    }
  }, {
    key: 'put',
    value: function put(files, callback, process) {
      var _this2 = this;

      _asyncMin2.default.waterfall([function (callback) {
        var bucket = _this2.options.bucket;
        var ak = _this2.options.token.split(':')[0];
        var instance = _axios2.default.create({
          headers: {}
        });
        instance.get('https://uc.qbox.me/v1/query', { params: {
            ak: ak,
            bucket: bucket
          } }).then(function (res) {
          var protocol = window.location.protocol.replace(/:$/, '') || 'http';
          var host = res.data[protocol] && res.data[protocol]['up'] && res.data[protocol]['up'][1] || 'http://up.qiniu.com';
          callback(null, { host: host, protocol: protocol });
        }).catch(function (error) {
          callback(error);
        });
      }, function (res, callback) {
        _asyncMin2.default.map(files, function (file, callback) {
          file.host = res.host;
          if (file.size < _this2.blockSize) {
            typeof process == 'function' && process(null, { file: file });
            _this2.directUpFile(file, function (err, data) {
              callback(err, data);
            });
          } else {
            _this2.sliceUpFile(file, callback, process);
          }
        }, callback);
      }], callback);
    }
  }]);

  return qiniu;
}();

exports.default = qiniu;