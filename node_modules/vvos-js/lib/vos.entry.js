/**
 *  @file: vos.entry.js is a <js> file
 *  @date: File created 2017-09-29 17:11
 *  @author:  shangwenhe
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _vos = require('./vos.sdk');

var _vos2 = _interopRequireDefault(_vos);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _v = require('../vendor/uuid/v4.js');

var _v2 = _interopRequireDefault(_v);

var _encBase = require('crypto-js/enc-base64');

var _encBase2 = _interopRequireDefault(_encBase);

var _encUtf = require('crypto-js/enc-utf8');

var _encUtf2 = _interopRequireDefault(_encUtf);

var _hmacSha = require('crypto-js/hmac-sha256');

var _hmacSha2 = _interopRequireDefault(_hmacSha);

var _pick = require('../vendor/pick/pick.js');

var _pick2 = _interopRequireDefault(_pick);

var _asyncMin = require('async/dist/async.min.js');

var _asyncMin2 = _interopRequireDefault(_asyncMin);

var _crypto = require('../vendor/token/crypto.js');

var _crypto2 = _interopRequireDefault(_crypto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Token = new _crypto2.default();

var vvos = function () {
  function vvos(arg) {
    _classCallCheck(this, vvos);

    // api token 
    this.gettoken = arg && arg.api && arg.api.gettoken || '/vos/api/gettoken';
    this.notifier = arg && arg.api && arg.api.notifier || '/vos/api/notifier';
    this.exists = arg && arg.api && arg.api.exists || '/vos/api/exists';
    // 默认参数 
    this['vos-client'] = arg && arg['client'] || 'vos-js.sdk 1.0.0.0';
    this['vos-trace-id'] = arg && arg['vos-trace-id'] || (0, _v2.default)();
    this['clouds'] = arg && arg['clouds'] || ['kodo', 'oss'];
    this.cover = !arg || arg && typeof arg.cover === 'undefined' ? true : arg.cover;
    this.files = [];
    this.secretKey = (0, _v2.default)();
  }

  _createClass(vvos, [{
    key: '_setHeader',
    value: function _setHeader(headers) {
      var _this = this;

      // 设置公共头
      _axios2.default.interceptors.request.use(function (config) {
        // Do something before request is sent
        config.headers = Object.assign({}, config.headers, {
          'vos-access-timestamp': Math.round(new Date().getTime() / 1000).toString(),
          'vos-client': _this['vos-client'],
          'vos-trace-id': _this['vos-trace-id']
        }, headers);
        return config;
      }, function (error) {
        console && console.log(error);
      });
    }

    /*
    * addfiles 添加文件
    * @ params files { file: , path: ,}
    */

  }, {
    key: 'addfiles',
    value: function addfiles(files) {
      this.files = this.files.concat(files);
    }

    /*
    * progress 进度条
    * @params callback 进度回调
    */

  }, {
    key: 'progress',
    value: function progress(callback) {
      return callback || function () {};
    }

    /*
    * @desc 确认上传
    * @params
    */

  }, {
    key: 'submit',
    value: function submit(_ref, callback, process) {
      var _ref$headers = _ref.headers,
          headers = _ref$headers === undefined ? {} : _ref$headers,
          _ref$gettoken = _ref.gettoken,
          gettoken = _ref$gettoken === undefined ? {} : _ref$gettoken,
          _ref$notifier = _ref.notifier,
          notifier = _ref$notifier === undefined ? {} : _ref$notifier,
          _ref$exists = _ref.exists,
          exists = _ref$exists === undefined ? {} : _ref$exists;

      var _this2 = this;

      this._setHeader(headers);

      _asyncMin2.default.waterfall([function (callback) {

        /**
        * @desc 验证文件是否存在
        */
        if (_this2.cover) {
          callback(null, _this2.files);
          return;
        }

        /**
        * @desc 并发验证文件是否存在
        */
        _asyncMin2.default.filterLimit(Object.keys(_this2.files), 20, function (filesKey, callback, index) {
          var item = _this2.files[filesKey];
          var key = (item.path || '') + item.name;
          _axios2.default.post(_this2.exists, Object.assign(exists, { key: key })).then(function (_ref2) {
            var data = _ref2.data;

            if (data && data.exists) {
              console && console.log('<<<文件已经存在:' + key + '跳过上传');
              _this2.files[filesKey] = null;
              callback(null, false);
              return;
            }
            callback(null, filesKey);
          }).catch(function (err) {

            /**
            * @desc 如果请求出错则跳过该上传文件
            */
            callback(null, false);
          });
        }, function (err, existsFiles) {

          var files = _this2.files.filter(function (item) {
            return item;
          });
          if (!files.length) {
            callback({ msg: '上传列表为空' });
            return;
          }
          callback(err, files);
        });
      }, function (files, callback) {

        /**
        * @desc 取得密钥
        */
        _axios2.default.post(_this2.gettoken, Object.assign(gettoken, {
          requestToken: Token.requestToken({
            header: {},
            payload: {
              "requestId": _this2['vos-trace-id'],
              "client": _this2['vos-client'],
              "clouds": _this2['clouds']
            },
            secretKey: _this2.secretKey
          }),
          keys: files.map(function (item, index) {
            if (!item.key) {
              item.key = item.name;
              item.path && (item.key = item.path + item.key);
            }
            files[index] && (files[index]['key'] = item.key);
            return item.key;
          })
        })).then(function (res) {
          if (res.data && (!res.data.accessToken || !res.data.keys)) {
            callback(res.data);
            return;
          }
          var info = Token.parseToken(res.data.accessToken);
          callback(null, {
            data: info[1],
            encodeKey: info[2],
            keys: res.data.keys,
            accessToken: res.data.accessToken
          }, files);
        }).catch(function (err) {
          callback(err);
        });
      }, function (res, files, callback) {
        /**
        * @desc 上传文件 调用第三方SDK, 上传文件
        */
        files.map(function (item, index) {
          // 如果服务端没有返回对应key value 则使用原有的名字
          item.key = res.keys[item.key] || item.key;
          files[index] && (files[index]['key'] = item.key);
        });
        var vos = new _vos2.default(res.data);
        vos.put(files, function (err, data) {
          callback(err, data, res);
        }, process);
      }, function (data, res, callback) {

        /**
        * @desc 文件已经上传至第三方服务，通知服务已经上传的文件，并取得链接
        */
        _axios2.default.post(_this2.notifier, Object.assign(notifier, {
          keys: data.filter(function (item) {
            return item;
          }).map(function (item) {
            return item.name;
          }),
          accessToken: res.accessToken
        })).then(function (res) {
          callback(null, res);
        }).catch(function (err) {
          callback(err);
        });
      }], callback);
    }
  }]);

  return vvos;
}();

exports.default = vvos;