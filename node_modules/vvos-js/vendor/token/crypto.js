/**
 *  @file: libbase.es is a <es> file
 *  @date: File created 2017-10-12 09:38
 *  @author:  shangwenhe
 */

'use strict';

import cryptoBase64 from 'crypto-js/enc-base64.js';
import cryptoUtf8 from 'crypto-js/enc-utf8.js';
import HmacSHA256 from 'crypto-js/hmac-sha256.js';
import AES from 'crypto-js/aes.js';

class libbase {

  constructor(){
    // this.secretKey = secretKey;
  }

  /**
   * 解密响应token
   */
  parseToken(token) {
    let [accessKey, payload, secretKey] = token.split('.');
    try {
      accessKey = JSON.parse(this.Base64Decode(this.UrlSafeDecode(accessKey)));
      let payloadJson = JSON.parse(this.Base64Decode(this.UrlSafeDecode(payload)));
      return [accessKey, payloadJson, [secretKey, AES.encrypt(payload,secretKey).toString()].join('./MKINFO>_')  ];
    } catch (e) {
      return [accessKey, payload, secretKey];
    }
  }

  /**
   * 确认提交成功合成 token 
   */
  restringifyToken([ accessKey, secretKey]){
    let [ secretSalt, encode ] = secretKey.split('./MKINFO>_');
    return [this.stringifyToken(accessKey), AES.decrypt(encode, secretSalt).toString(cryptoUtf8), secretSalt].join('.'); 
  }


  stringifyToken(data) {
    return this.UrlSafeEncode(this.Base64(JSON.stringify(data)));
  }

  /**
   * 加密请求token requestToken
   */
  requestToken({
    header,
    payload,
    secretKey
  }) {
    let result = [this.stringifyToken(header),
      this.stringifyToken(payload),
      this.UrlSafeEncode(this.HmacSHA256(header + '.' + payload, secretKey))
    ];
    return result.join('.');
  }

  Base64Decode(base64) {
    let dbase64k = cryptoBase64.parse(base64);
    return dbase64k.toString(cryptoUtf8);
  }
  Base64(str) {
    let Utf8Str = cryptoUtf8.parse(str);
    return cryptoBase64.stringify(Utf8Str);
  }

  UrlSafeDecode(str) {
    // encrypt
    var DEC = {
      '-': '+',
      '_': '/',
      '.': '='
    };
    return (str + '==='.slice((str.length + 3) % 4)).replace(/[-_.]/g, function(m) {
      return DEC[m];
    })

  }
  UrlSafeEncode(str) {
    // encrypt
    var ENC = {
      '+': '-',
      '/': '_',
      '=': '.'
    };
    return str.replace(/[+/=]/g, function(m) {
      return ENC[m];
    }).replace(/[.=]{1,2}$/, '')

  }

  HmacSHA256(message, secretKey) {
    let result = HmacSHA256(message, secretKey).toString(cryptoBase64);
    return result;
  }

}

export default libbase;
